@model RadialReview.Models.Tests.TestResults
@{
	ViewBag.Title = "AllPages";
	Layout = "~/Views/Shared/_Layout.cshtml";

	var passed = Model.Batch.Passed.NotNull(x => x.Value);
	var total = Model.Batch.Passed.NotNull(x => x.Value + Model.Batch.Failed.NotNull(y => y.Value));
}

<h2>All Tests</h2>

<a class="btn btn-primary pull-right" href="/UnitTest/EditPage">Add Page</a>

<table style="width:200px">
	<thead>
	<tr>
		<th>Duration</th>
		<td>@(Model.Batch.CompleteTime.HasValue ? (int)((Model.Batch.CompleteTime.Value - Model.Batch.CreateTime).TotalSeconds*100.0)/100.0 + "s" : "unfinished")</td>
	</tr>
	<tr>
		<th>Passed</th>
		<td><span class="label label-@(passed==total?"success":"danger")">@passed/@total</span></td>
	</tr>
</table>
<br />
<table class="table table-condensed table-hover">
	<thead>
		<tr>
			<th style="width: 1px;" class="alignCenter">Id</th>
			<th style="width: 1px;">UserId</th>
			<th>Url</th>
			<th style="width: 1px;" class="alignCenter">Status</th>
			<th style="width: 1px;">HttpCode</th>
			<th style="width: 1px;">Expected</th>
			<th style="width: 1px;">Elapsed</th>
			<th style="width: 50px"></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var r in Model.Results)
		{
			<tr>
				<td  class="alignCenter"><a href="/UnitTest/EditPage/@r.TestUrl.Id">@r.TestUrl.Id</a></td>
				<td class="alignCenter">@r.TestUrl.AsUserId</td>
				<td><a href="@r.TestUrl.Url">@r.TestUrl.Url</a></td>
				<td >@(r.Passed ? new HtmlString("<span class='label label-success'>Passed</span>") : new HtmlString("<span title='"+r.Error+"' class='label label-warning'>FAILED</span>"))</td>
				<td class="alignCenter">@(r.HttpCode)</td>
				<td class="alignCenter">@(r.TestUrl.ExpectedCode)</td>
				<td class="alignCenter">@(r.EndTime.HasValue ? (int)(r.DurationMs) + "ms" : "unfinished")</td>
				<td class style="height:24px;padding: 0;"><span class="holder">@foreach (var h in r._History){<span title="@((int)h.DurationMs)ms" class="sliver @(h.Passed?"True":"False")" 
					        style="height:@((int)Math.Max(1, Math.Min(20, 1.0 + 1.3 * Math.Log(h.DurationMs, 2))))px">
						</span>}</span></td>
			
			</tr>
		}
	</tbody>
</table>

<style>
	.label {
		width: 50px;
		display: inline-block;
	}

	.sliver {
		display: inline-block;
		width: 4px;
		padding: 0;
		margin: 0;
		border-right: 1px solid white;
		align-self: flex-end;
	}

	span.holder {
		/*background-color: lightgray;*/
		height: 24px;
		position: relative;    
		display: inline-flex;
		border: 1px solid gray;
		border-radius: 2px;
		padding: 0 0px 0 1px;
		width: 43px;
	}
	
	.sliver.True {
		background-color: #5cb85c;
	}
	.sliver.False {
		background-color: red;
	}
</style>