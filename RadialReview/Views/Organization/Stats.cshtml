@model List<RadialReview.Controllers.OrganizationController.OrgStats>
@using RadialReview.Models.Enums
@{
    ViewBag.FullWidth = true;

    var scoreOrder = new Dictionary<AccountType, int>() {
        {AccountType.Demo, 1},
        {AccountType.Implementer, 2},
        {AccountType.Dormant, 3},
        {AccountType.Cancelled, 4},
        {AccountType.Other, 5},
        {AccountType.Paying, 6},
    };
}

<div class="clearfix"></div>
<table class="pull-right ">
    @foreach (var type in Enum.GetValues(typeof(AccountType))) {
        <tr>
            <th style="color: orange;text-align:right;">@((AccountType)type)</th>
            <td>@Model.Count(x => x.Status == (AccountType)type)</td>
        </tr>
    }
    <tr style="border-top:1px solid orange;">
        <th style="color: orange;text-align:right;" title="Paying+Demo+Implementer">PDI</th>
        <td>@Model.Count(x => x.Status == AccountType.Demo || x.Status == AccountType.Paying || x.Status == AccountType.Implementer)</td>
    </tr>
    <tr style="border-top:1px solid orange;">
        <th style="color: orange;text-align:right;" title="Paying+Demo">PD</th>
        <td>@Model.Count(x => x.Status == AccountType.Demo || x.Status == AccountType.Paying)</td>
    </tr>
    <tr style="border-top:1px solid orange">
        <th style="color: orange;text-align:right;">Total</th>
        <td>@Model.Count()</td>
    </tr>
</table>
<div class="pull-left">

    <h2 style="color: orange"><b> Stats</b></h2>
    <h4 class="pull-left">Server Time</h4>
    <h4 class="pull-left" style="color:orange"><b>@DateTime.UtcNow.ToString()</b></h4>
</div>
<div class="clearfix"></div>


<table class="table table-condensed table-striped table-hover">
    <thead class="table-header">
        <tr><th>OrgId</th><th>OrgName</th><th>User</th><th>Position</th><th>CreateTime</th><th>Status</th><th>LastLogin</th><th>TrialEnd</th><th>Last Meeting</th></tr>
    </thead>
    @foreach (var i in Model) {
        <tr>
            <td>@i.OrgId</td>
            <td class="alignRight"><a href="/Organization/Which/@i.OrgId">@i.OrgName</a></td>
            <td style="width:120px;">@i.Username  </td>
            <td>@i.Position</td>
            <td class="alignLeft">@i.OrgCreateTime.NotNull(x => x.Value.ToShortDateString())</td>
            <td class="account-@i.Status {sorter: 'digit'} account">
                <span style="display: none">@(scoreOrder[i.Status])</span>
                @if (i.Status == AccountType.Cancelled) {
                    @:Cancelled
                } else {
                    @Html.EnumDropDownList("at-" + i.OrgId, i.Status, new { onchange = "changeAccountType(this," + i.OrgId + ")" })
                }

            </td>

            @*<td class="account-@i.Status select" data-sort="@(scoreOrder[i.Status])"><span class="hidden">@(scoreOrder[i.Status])</span><span class="" data-sort="@(scoreOrder[i.Status])">@i.Status</span></td>*@
            <td class="alignRight" style="color:@(i.LastLogin.NotNull(x =>{
						                         if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(14)))
						                         {
													 if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(7)))
													 {
														 if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(1))){
															 return "green";
														 }
														 return "lightgreen";
							                         }
													 return "#ef7622";
						                         }
						                         return "red";
					                         })??"darkred")">
                @i.LastLogin.NotNull(x => x.Value.ToShortDateString())
            </td>
            <td title="@i.TrialEnd.NotNull(x => x.Value.ToShortDateString())" style="color:white;background-color:@(i.Status!=AccountType.Demo?"blueviolet":i.TrialEnd.NotNull(x => (x > DateTime.UtcNow) ? "blueviolet" : "deeppink") ?? "blueviolet");">
                @if (i.TrialEnd != DateTime.MinValue && i.Status == AccountType.Demo) {
                    @i.TrialEnd.NotNull(x => x.Value.ToShortDateString())
                }
            </td>
            <td class="alignRight" style="background-color:@(i.LastMeeting.NotNull(x =>{
						                         if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(28)))
						                         {
													 if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(14)))
													 {
														 if (x > DateTime.UtcNow.Subtract(TimeSpan.FromDays(7))){
                                                             return "#4AB94A";
														 }
														 return "lightgreen";
							                         }
                                                     return "#FFAE76";
						                         }
                                                 return "#FF7979";
					                         })??"lightgray")">
                @(i.LastMeeting.NotNull(x => x.Value.ToShortDateString()))
            </td>

        </tr>
    }
</table>

@using (Html.BeginScripts()) {
    <script>
        $("table").tablesorter({
            // sortForce: [[0, 1]],
            sortList: [[0,1]],
            sortStable: true,
            headers: {
                4: { sorter: 'attr' },
            }
        });

        var acType = {
            @foreach (var kv in scoreOrder) {
                @:@(kv.Key):@(kv.Value),
                                                                                    }
        };

        $("select").on('focus', function () {
            // Store the current value on focus and on change
            $(this).data("previous",this.value);
        })

        function changeAccountType(self, id) {
            function updateAccountType(){
                $.ajax("/organization/setaccounttype/" + id + "?type=" + $(self).val());
                $(self).closest("td").removeClass(function (index, css) {
                    return (css.match(/\baccount-\S+/g) || []).join(' ');
                }).addClass("account-" + $(self).val());
                $(self).find("span").html(acType[$(self).val()]);
            }


            if ("Cancelled"==$(self).val()){
                showModal({
                    title:"Are you sure you want to delete this organization?",
                    icon:"warning",
                    //fields:{type:"header",value:"This action will affect the organizations members"},
                    success:function(){
                        updateAccountType(); $(self).parent("td").html("Cancelled")
                    },
                    cancel:function(){
                        $(self).val($(self).data("previous"));
                        changeAccountType(self, id)
                    }
                });
            }else{
                updateAccountType();
            }
        }
    </script>
}

<style>
    .account {
        padding: 0 !important;
        vertical-align: middle !important;
    }

        .account select {
            width: 100%;
        }

    tr.delete td {
        text-decoration: line-through;
    }

    .account-Paying select {
        background-color: #1b6b74;
        color: white;
        font-weight: bold;
    }

    .account-Dormant {
        color: gray;
    }

    .account-Other select {
        background-color: gray;
        color: white;
        font-weight: bold;
    }

    .account-Cancelled {
        color: lightgray;
        font-style: italic;
    }

    .account-Demo select {
        background-color: #d9534f;
        color: white;
        font-weight: bold;
    }

    .account-Implementer select {
        background-color: #ff7d00;
        color: white;
        font-weight: bold;
    }

    td {
        padding: 0 5px;
    }

    table.tablesorter thead tr .headerSortDown, table.tablesorter thead tr :not(.tablesorter-headerUnSorted) .tablesorter-header-inner {
        color: black;
    }

    .select {
        vertical-align: middle;
        text-align: center;
        border-bottom: 1px solid white;
    }

    /*.account-Paying {
        background-color: #1b6b74;
        color: white;
        font-weight: bold;
    }

    .account-Dormant {
        color: gray;
    }

    .account-Other {
        background-color: gray;
        color: white;
        font-weight: bold;
    }

    .account-Cancelled {
        color: lightgray;
        font-style: italic;
    }

    .account-Demo {
        background-color: #d9534f;
        color: white;
        font-weight: bold;
    }

    .account-Implementer {
        background-color: #ff7d00;
        color: white;
        font-weight: bold;
    }*/
</style>