@model RadialReview.Models.L10.VM.L10MeetingStatsVM
@{
	//Layout = "~/Views/L10/BasePage.cshtml";

	var list = new List<HtmlString>();
	var join = new HtmlString("n/a");
	var duration = "On-Going";
	if (Model.StartTime != null) {
		var format = "h:mm";
		list.Add(Html.ConvertFromUtcLocal(Model.StartTime.Value, format));
		if (Model.EndTime != null) {
			list.Add(Html.ConvertFromUtcLocal(Model.EndTime.Value, format));
			duration = (long)(Model.EndTime.Value - Model.StartTime.Value).TotalMinutes + " minutes";
		} else {
			list.Add(new HtmlString(" In Progress "));
		}
		join = new HtmlString(String.Join(" - ", list));
	}
}

<div class="component meeting-stats">
	<div class="row">

		<div class="col-md-12">
			<div class="row">
				<div class="col-xs-6 smallPad smallBreak2">
					<div class="stats">
						<h1 id="reviewsCompleted" class="scramble resize1" data-range="99" style="">@Model.IssuesSolved</h1>
						<h6>Issues Solved</h6>
					</div>
				</div>
				@*<div class="col-xs-6 smallPad smallBreak2">
						<div class="stats">
							<h1 id="questionsAnswered" class="scramble resize1" data-range="1500" style="">@Model.TodoCompleted</h1>
							<h6>To-do Completed</h6>
						</div>
					</div>*@
				<div class="col-xs-6 smallPad smallBreak2">
					<div class="stats">
						<h1 id="questionsAnswered" class="scramble resize1" data-range="1500" style="margin-right:-8px;">@(Math.Round(Model.TodoCompletionPercentage))%</h1>
						<h6>To-do Completion</h6>
					</div>
				</div>
			</div>
		</div>
		<div class="col-md-12">
			<div class="row">
				<div class="col-xs-6 smallPad smallBreak2">
					<div class="stats">
						<h1 id="questionsAnswered" class="scramble resize1" data-range="1500" style="font-size: 52px;margin-top: 27px;margin-bottom: 24px;">
							@(double.IsNaN(Model.AverageRating) ? "N/A" : (Math.Round(Model.AverageRating * 10.0) / 10.0) + "")
						</h1>
						<h6>Average Rating</h6>
					</div>
				</div>
				<div class="col-xs-6 smallPad smallBreak2 test-ignore">
					<div class="stats">
						<h1 id="questionsAnswered" class="scramble resize1" data-range="1500" style="font-size: 30px;margin-top: 37px;margin-bottom: 34px;">
							@join
						</h1>
						<h6 class="test-ignore">@duration</h6>
						@*<h6>Meeting Duration</h6>*@
					</div>
				</div>
			</div>
		</div>
	</div>
	@*@if (Model.TodosCreated.Any(x => x.CompleteTime == null))
		{
			<h3 style="font-size: 20px; color: #444;">Newly Added New To-Dos</h3>
			<div class="todo-container ">
				<ol class="todo-list sortable ">
					@foreach (var i in Model.TodosCreated.OrderBy(x => x.Ordering).Where(x => x.CompleteTime == null).GroupBy(x => x.AccountableUser.NotNull(y => y.GetName())).SelectMany(x => x)){
						<li class="todo-item">
							@Html.Partial("_ProfilePicture", i.AccountableUser)
							<span class="todo-message">@i.Message</span>
							<span class="todo-due">@i.DueDate.ToShortDateString()</span>
						</li>
					}
				</ol>
			</div>
		}*@
</div>
<span style="color:transparent">@Model.Version</span>

@*<div class="component meeting-stats">
		<div class="row">
			<div class="col-md-6">
				<div class="chart-title">Meeting Start/End Time</div>
				<div id="StartTime" style="width:100%;"></div>
			</div>
			<div class="col-md-6">
				<div class="chart-title">Average Rating</div>
				<div id="AvgRating" style="width:100%;">
				</div>
			</div>
		</div>

	</div>*@
@*<script src="~/Scripts/d3/d3.v3.min.js"></script>
	<script src="~/Scripts/d3/Charts.js"></script>*@
<script>

	@*@{
		var start = Model.AllMeetings
			.Select(x => x.StartTime)
			.Where(x => x.HasValue)
			.Select(x => Html.Organization().ConvertFromUTC(x.Value))
			.Select(x => new {v=x.Minute/60.0 + x.Hour,se="start"});
		var end = Model.AllMeetings
			.Select(x => x.CompleteTime)
			.Where(x => x.HasValue)
			.Select(x => Html.Organization().ConvertFromUTC(x.Value))
			.Select(x => new { v = x.Minute / 60.0 + x.Hour, se = "end" });
		var startEnd = start.ToList();
		startEnd.AddRange(end);
		var sa = startEnd.Select(x=>x.v).Median();

		var rating = Model.AllMeetings.OrderBy(x => x.StartTime).Select(x => new{
			x = x.StartTime.Value.Date.ToJavascriptMilliseconds(),
			y = x._MeetingAttendees.Average(y => y.Rating)
		}).Where(x => x.y != null);



	}

	////////////////////
	//Start Time

	var startTimeHistogram = new Charts.Histogram("#StartTime")
		.SetLabelFunction(function(d) {
			var hour = ((Math.floor(d)+ 11) % 12)+ 1;
			var min = Math.round((d - Math.floor(d)) * 60);
			while(min >= 60) {
				hour += 1;
				min -= 60;
			}
			var amPm = d > 11.99 ? "p" : "a";
			return hour + ":" + Charts.Util.pad(min, 2)+amPm;
		}).RotateXTitle().InitializeWidth(
		@Html.ArrayToString(
				startEnd.Where(x=>x.v>=sa-3.5 && x.v<=sa+3.5).Select(d=>new{x=d.v,group=d.se})
			),
		5/60.
	);
	//Rotate axis text 90 deg
	//d3.select("#StartTime svg .x.axis").selectAll("text")
	//	.attr("y", 0)
	//	.attr("x", 9)
	//	.attr("dy", ".35em")
	//	.attr("transform", "rotate(90)")
	//	.style("text-anchor", "start");

	////////////////////
	//Avg Rating

	var ratingHistogram = new Charts.Line("#AvgRating")
		.SetLabelFunction(function(d) {
			var curr_date = d.getDate();
			var curr_month = d.getMonth() + 1; //Months are zero based
			var curr_year = Charts.Util.pad(d.getFullYear() % 100, 2);
			return (curr_month + "-" +curr_date + "-" +  curr_year);
			//return d3.time.format("%d-%b-%y").parse(d);
		}).Initialize(
			@Html.ArrayToString(rating)
		).RotateXTitle();*@

</script>

<style>
	.todo-item {
		font-size: 18px;
	}

	.todo-message {
		position: relative;
		top: -8px;
	}

	.todo-container .picture {
		width: 32px;
		height: 32px;
	}

	.todo-due {
		float: right;
		color: #CCC;
		position: relative;
		top: 8px;
	}
</style>