@model RadialReview.Models.L10.VM.L10MeetingVM
@{
	ViewBag.Title = "Todo";
	Layout = "~/Views/L10/BasePage.cshtml";

	var guid = Guid.NewGuid().ToString();
}

<div class="todo">
	<div class="row">
		<div class="col-md-8">
			<hgroup class="page-header">
				<div class="pull-right">
					@*<div class="btn-group ">
						<div class="btn btn-default btn-xs detailsBtn sm" title='Hide details'><span class="icon fontastic-icon-arrows-in"></span></div>
						<div class="btn btn-default btn-xs detailsBtn lg" title='Show details'><span class="icon fontastic-icon-arrows-out"></span></div>
					</div>*@
					<div class="btn-group">
						<div class="btn btn-default btn-xs issuesModal"
						     data-method="createissue"
						     data-meeting="@Model.Meeting.Id"
						     data-recurrence="@Model.Recurrence.Id">
							<span class="glyphicon glyphicon-pushpin"></span> New Issue
						</div>
						<div class="btn btn-default btn-xs todoModal"
						     data-method="createtodo"
						     data-meeting="@Model.Meeting.Id"
						     data-recurrence="@Model.Recurrence.Id">
							<span class="glyphicon glyphicon-unchecked"></span> New Todo
						</div>
					</div>
				</div>
				<h2>Todo List <small>.</small></h2>
			</hgroup>
			<div class="todo-container ">
				<ol class="todo-list sortable init-@(guid)">
					@foreach (var i in Model.Todos.OrderBy(x => x.Ordering))
					{
						@Html.Partial("~/Views/L10/partial/TodoRow.cshtml", i)
					}
				</ol>
			</div>
		</div>
		<div class="col-md-4">
			<div class="hidden-lg hidden-md" style="height: 25px;"></div>
			<hgroup class="page-header details">
				<h4>Details</h4>
			</hgroup>
			<div class="component todoDetails" id="todoDetails"></div>
		</div>
	</div>
</div>

<script>
	var recurrenceId = @Model.Recurrence.Id;
	var meetingId = @Model.Meeting.Id;
	var oldContainer;
	var oldTodoList;

	$(function() {
		$(".todo-list").sortable({
			group: 'nested',
			handle: '.move-icon',
			/*afterMove: function(placeholder, container) {
			if (oldContainer != container) {
				if (oldContainer)
					oldContainer.el.removeClass("active");
				container.el.addClass("active");

				oldContainer = container;
			}
			},
			onDrop: function(item, container, _super) {
				container.el.removeClass("active");
				_super(item);
			}*/
			onDrop: function($item, container, _super, event) {
				_super($item, container);
				updateTodoList(@Model.Recurrence.Id, $(".todo-list"));
				refreshCurrentTodoDetails();
			}
		});
		oldTodoList = $(".todo-list").clone(true);
	});
</script>