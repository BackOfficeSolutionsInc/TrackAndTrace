@{
    var forceMin = ViewBag.ForceMin == null ? "" : "," + ((int)ViewBag.ForceMin);
    var scorecardKey = ViewBag.ScorecardKey as string ?? "model.Scorecard.Key";
}

<md-toolbar class="md-table-toolbar md-default" ng-hide="filter.show == true">
    <div class="md-toolbar-tools">
        <span>Scorecard</span>
        <span flex></span>
      
        <md-button class="md-icon-button" aria-label="Export Scorecard" href="/L10/ExportScorecard/{{::meetingId}}?type=csv" target="_blank">
            <md-tooltip md-direction="left">
                Export Scorecard
            </md-tooltip>
            <md-icon>file_download</md-icon>
        </md-button>
        <md-button class="md-icon-button measurableModal" aria-label="Add Measurable" data-recurrence="{{::meetingId}}">
            <md-tooltip md-direction="left">
                Add Measurable
            </md-tooltip>
            <md-icon>add</md-icon>
        </md-button>      
    </div>
</md-toolbar>

@{
    Html.RenderPartial("~/Views/Measurable/partial/list.cshtml", new ViewDataDictionary(){
        {"AddHeaders", false},
        {"AddController", false},
        {"DisableName", false},
        {"EditOwner", true},
        {"ForceMin", ViewBag.ForceMin},
        {"Selector", "(model.Scorecard) "},
    }); }


@using (Html.BeginScripts()) {
    @*<script src="~/Scripts/jquery/jquery.ui.sortable.js"></script>
    <script src="~/Scripts/L10/L10Scorecard.js"></script>*@
    @Scripts.Render("~/bundles/ScorecardDetails")
    <script>

        $(function () {
            fixHelperModified = function (e, tr) {
                var $originals = tr.children();
                var $helper = tr.clone();
                $helper.children().each(function (index) {
                    $(this).width($originals.eq(index).width());
                });
                return $helper;
            };

            var updateIndex = function (e, ui) {
                var order = [];
                var i = 0;
                $('tr', ui.item.parent()).each(function (i) {
                    order.push(+$(this).attr("data-measurable"));
                });

                var data = {
                    ordering: order,
                    recurrenceId: angular.element(document.querySelector('#ScorecardContainer')).scope().meetingId
                };
                $.ajax({
                    url: "/L10/UpdateRecurrenceMeasurableOrdering",
                    method: "POST",
                    data: $.param(data, true),
                    success: function (d) {
                        showJsonAlert(d);
                        angular.element(document.querySelector('#ScorecardContainer')).scope().$apply();
                    }
                });
            };

            $(".scorecard-table tbody").xsortable({
                items: ">.reorderable",
                handle: ".handle",
                helper: fixHelperModified,
                stop: updateIndex,
                placeholder: "xsortable-placeholder"
            }).disableSelection();
        });
    </script>
}

@using (Html.BeginStyles()) {
    <link href="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet" />
    <style>
        /*.inlineEdit:hover {
                    text-decoration: none;
                    border-bottom: dashed 1px #08C;
                    cursor: pointer;
                }*/

        .grid.gray {
            background-color: #eee;
            height: 100%;
        }

        /*md-fab-actions .md-button.md-fab md-icon{
            vertical-align: top !important;
        }*/
    </style>
}
