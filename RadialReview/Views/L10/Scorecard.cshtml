@using NHibernate.Util
@model RadialReview.Models.L10.VM.L10MeetingVM
@{
	ViewBag.Title = "Scorecard";
	Layout = "~/Views/L10/BasePage.cshtml";
}

<div class="scorecard meeting-page">
	<div class="row">
		<div class="col-md-12">
			<hgroup class="page-header">
				<div class="pull-right">
					@*<div class="btn-group">
						<div class="btn btn-default btn-xs" onclick="@Html.ShowModal("Add Measurable", "/L10/AddMeasurable/"+Model.Recurrence.Id, "/L10/AddMeasurable/")">
							<span class="icon fontastic-icon-science-laboratory"></span> Add Measurable
						</div>
					</div>*@
					@Html.Partial("partial/ButtonBar", Model)
				</div>
				<h2>Scorecard<small></small></h2>
			</hgroup>
			<div class="component">
				<h3 class="pull-left">Scorecard:</h3>
				<div class="clearfix"></div>
				<div style="position: relative;">
				@for (var i = 0; i < 1; i++)
				{
				if (i == 0)
				{
					@:<div class="table-responsive">
				}

					<table id="ScorecardTable@(i==1?"_Over":"")" class="scorecard-table @(i == 1 ? "hidden-xs hidden-sm hidden-md" : "")" >
						<thead>
							<tr>
								<th>&nbsp;</th>
								<th>&nbsp;</th>
								<th>&nbsp;</th>
								<th>&nbsp;</th>
								<th>&nbsp;</th>
								@if (i == 0)
								{
									foreach (var r in Model.Weeks)
									{
										<th class="date @(r.IsCurrentWeek ? "current" : "")" colspan="@(r.IsCurrentWeek ? "2" : "1")">
											@r.DisplayDate.AddDays(-6).ToString("MM/dd")
										</th>
										@*if (r.IsCurrentWeek){
											<th class="date current buttonColumn"></th>
										}*@
									}
								}
							</tr>
							<tr>
								<th class="heading who alignRight">Accountable</th>
								<th class="heading who alignLeft "><span class="newLine gray">/Admin</span></th>
								<th class="heading measurable">Measurable</th>
								<th class="heading target" colspan="2">Target</th>
								@if (i == 0)
								{
									foreach (var r in Model.Weeks)
									{
										<th class="date @(r.IsCurrentWeek ? "current" : "")" colspan="@(r.IsCurrentWeek ? "2" : "1")">
											@r.DisplayDate.ToString("MM/dd")
										</th>
										@*if (r.IsCurrentWeek){
											<th class="date current buttonColumn"></th>
										}*@
									}
								}
							</tr>
						</thead>
						<tbody>
							@{
								var row = 0;
							}
							@foreach (var m in Model.Meeting._MeetingMeasurables)
							{
								<tr>
									<td class="who first1 alignRight">
										@m.Measurable.AccountableUser.NotNull(x => x.GetName())
									</td>
									<td class="who first1 alignLeft">
										<span class="newLine gray">/@m.Measurable.AdminUser.NotNull(x => x.GetName())</span>
									</td>
									<td class="measurable first1" title="@m.Measurable.Title">@m.Measurable.Title</td>
									<td class="target direction" data-measurable="@m.Id">@m.Measurable.GoalDirection.ToSymbol()</td>
									<td class="target value" data-measurable="@m.Id"><span class="inlineEdit" data-measurable="@m.Measurable.Id" data-url="/L10/UpdateMeasurable" >@m.Measurable.Goal.ToString("0.#####")</span></td>

									@if (i == 0){
										var col = 0;
										foreach (var r in Model.Weeks){
											var found = Model.Scores.FirstOrDefault(x => r.ForWeek == x.ForWeek && x.MeasurableId == m.Measurable.Id);

											<td class="score @(r.IsCurrentWeek ? "current" : "")">
												<input data-goal="@(m.Measurable.Goal)"
													   data-goal-dir="@(m.Measurable.GoalDirection)"
													   data-row="@(row)"
													   data-col="@(col)"
													   type="text"
													   placeholder="N/A"
													   value="@(found.NotNull(x => x.Measured.NotNull(y => y.Value.ToString("0.####"))) ?? "")"
													   class="grid rt"
													   data-scoreid="@(found.NotNull(x => x.Id))"
													   data-measurable="@m.Measurable.Id"
													   data-week="@(r.ForWeek.ToJavascriptMilliseconds())"
													   id="sc_@(found != null?""+found.Id : row+"_"+col)" />
											</td>
											if (r.IsCurrentWeek){
												<td class="buttonHolder">
													<span class="glyphicon glyphicon-pushpin issuesButton issuesModal"
														  data-meeting="@Model.Meeting.Id"
														  data-recurrence="@Model.Recurrence.Id"
														  data-measurable="@found.Measurable.Id"
														  data-score="@(found.NotNull(x => x.Id))"
														@*data-message="@found.IssueMessage().EscapeHtml()"
																data-details="@found.IssueDetails().EscapeHtml()"*@>
													</span>
													<span class="glyphicon glyphicon-unchecked todoButton todoModal"
														  data-method="CreateScorecardTodo"
														  data-meeting="@Model.Meeting.Id"
														  data-recurrence="@Model.Recurrence.Id"
														  data-measurable="@found.Measurable.Id"
														  data-accountable="@found.AccountableUserId"
														  data-score="@(found.NotNull(x => x.Id))">
													</span>
												</td>
											}
											col += 1;
										}
										}
								</tr>
											row += 1;
										}
										<tr class="last"></tr>
										</tbody>
					</table>
					if (i == 0){
						@:</div>
					}
				}
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	$(".score input").each(function () { updateScore(this); });
	//debugger;
	//new ColumnResize($("#ScorecardTable")[0]);
	//$(".scorecard-table").colResizable({
	//	liveDrag: true,
	//	gripInnerHtml: "<div class='grip'></div>",
	//	draggingClass: "dragging"
	//});
	//$("#ScorecardTable").wrap('<div id="table_container"></div>').after('<div id="bottom_anchor"></div>');
	//$("#ScorecardTable_resp").scroll(moveScroll("#ScorecardTable", "#ScorecardTable_resp"));

	//$('#ScorecardTable').cTable({
	//	width: 1300,
	//	height: 500,
	//	fCols: 3,
	//	fRows: 2
	////});
	//var onColumnSort = function (newIndexOrder, columnIndex, lastColumnIndex) {
	//	var offset = (this.options.allowSelections && this.options.showSelectionColumn) ? 1 : 0,
	//		doc = document;

	//	if (columnIndex !== lastColumnIndex) {
	//		if (lastColumnIndex > -1) {
	//			doc.getElementById("demoHdr" + (lastColumnIndex - offset)).parentNode.style.backgroundColor = "";
	//		}
	//		doc.getElementById("demoHdr" + (columnIndex - offset)).parentNode.style.backgroundColor = "#f7f7f7";
	//	}
	//};

	//var onResizeGrid = function (newWidth, newHeight) {
	//	var demoDivStyle = document.getElementById("ScorecardDiv").style;
	//	demoDivStyle.width = newWidth + "px";
	//	demoDivStyle.height = newHeight + "px";
	//};

	//var myGrid = new Grid("ScorecardGrid", {
	//	srcType: "dom",
	//	srcData: "ScorecardTable",
	//	allowGridResize: true,
	//	allowColumnResize: true,
	//	allowClientSideSorting: true,
	//	allowSelections: true,
	//	allowMultipleSelections: true,
	//	showSelectionColumn: true,
	//	onColumnSort: onColumnSort,
	//	onResizeGrid: onResizeGrid,
	//	//colAlign: gridColAlign,
	//	colBGColors: ["#fafafa"],
	//	//colSortTypes: gridColSortTypes,
	//	fixedCols: 1
	//});
	/*$('#ScorecardTable').fxdHdrCol({
		fixedCols: 3,
		width: "100%",
		height: 400,
		colModal: [
			   { width: 50, align: 'center' },
			   { width: 110, align: 'center' },
			   { width: 170, align: 'left' },
			   { width: 250, align: 'left' },
			   { width: 100, align: 'left' },
			   { width: 70, align: 'left' },
			   { width: 100, align: 'left' },
			   { width: 100, align: 'center' },
			   { width: 90, align: 'left' },
			   { width: 400, align: 'left' }
		],
		sort: true
	});*/
</script>