@using NHibernate.Util
@using RadialReview.Models.L10.VM
@using RadialReview.Models.ViewModels
@using RadialReview.Utilities
@model RadialReview.Models.L10.VM.L10MeetingVM
@{
	ViewBag.Title = "Scorecard";
	Layout = "~/Views/L10/BasePage.cshtml";
}

<div class="scorecard meeting-page">
	<div class="row">
		<div class="col-md-12">
			<hgroup class="page-header">
				<div class="pull-right">
					<div class="btn-group hidden-firefox">
						<div class="btn btn-default btn-xs" onclick="zoomIn()">
							<span class="icon fontastic-icon-zoom-in-2"></span>
						</div>
						<div class="btn btn-default btn-xs" onclick="zoomOut()">
							<span class="icon fontastic-icon-zoom-out-2"></span>
						</div>
					</div>
					@Html.Partial("partial/ButtonBar", Model, new ViewDataDictionary(){{"Links",new Dictionary<string,string>{
						{"href","/L10/ExportScorecard/"+Model.Recurrence.Id+"?type=csv"},
						{"text","Export Scorecard (.csv)"},
						{"class","glyphicon glyphicon-save"}
					}.AsList()}})
				</div>
				<h2>Scorecard<small></small></h2>
			</hgroup>
				<div class="empty-holder scorecard-empty-holder @(Model.Meeting._MeetingMeasurables.Any() ? "hidden" : "")"></div>
			<div class="component zoomable">
				<div class="clearfix"></div>

				<div style="position: relative;" class="scorecard-holder @(Model.Meeting._MeetingMeasurables.Any()?"":" hidden")">
					@for (var i = 0; i < 2; i++)
					{
						if (i == 0)
						{
							@:<div class="table-responsive scroll-right" style="min-height: 100px;">
						}

						<table id="ScorecardTable@(i==1?"_Over":"")" class="scorecard-table @(i == 1 ? "hidden-xs hidden-sm resizable Flipped" : "")">
							<thead class="Content">
								<tr>
									<th colspan="5">
                                        <div class="btn-group" style="margin:2px 2px;">
                                            <div class="btn btn-link btn-xs @(Model.CanEdit?"":"disabled") gray" onclick="@(Model.CanEdit?Html.ShowModal("Add Measurable", "/L10/AddMeasurable/" + Model.Recurrence.Id, "/L10/AddMeasurable/"):new HtmlString(""))">
                                                @*<span class="icon fontastic-icon-science-laboratory"></span>*@Add Measurable
                                            </div>
                                        </div>
                                    </th>
									@*<th>&nbsp;</th>
                                    <th>&nbsp;</th>
                                    <th>&nbsp;</th>
                                    <th>&nbsp;</th>*@
									<th>&nbsp;</th>
									<th>&nbsp;</th>
									<th>&nbsp;</th>
									@if (i == 0)
									{
										foreach (var r in Model.Weeks)
										{
											<th class="date @(r.IsCurrentWeek ? "current" : "")" colspan="@(r.IsCurrentWeek ? "2" : "1")">
												@r.DisplayDate.AddDays(0).ToString(TimingUtility.ScorecardFormat1(Model.ScorecardType))
											</th>
											@*if (r.IsCurrentWeek){
													<th class="date current buttonColumn"></th>
												}*@
										}
									}
								</tr>
								<tr>
									<th>&nbsp;</th>
									<th style="min-width: 18px;">&nbsp;</th>
									<th class="heading who alignRight">@*Accountable*@</th>
									<th class="heading who alignLeft "><span class="newLine gray">@*/Admin*@</span></th>
									<th class="heading measurable">Measurable</th>
									<th class="heading target" colspan="2">Goal</th>
									<th class="heading"></th>
									@if (i == 0)
									{
										foreach (var r in Model.Weeks)
										{
											<th class="date @(r.IsCurrentWeek ? "current" : "")" colspan="@(r.IsCurrentWeek ? "2" : "1")">
												@TimingUtility.ScorecardRangeEnd(Model.ScorecardType, r.DisplayDate).ToString(TimingUtility.ScorecardFormat2(Model.ScorecardType))
											</th>
											@*if (r.IsCurrentWeek){
													<th class="date current buttonColumn"></th>
												}*@
										}
									}
								</tr>
							</thead>
							<tbody class="Content">
								@{
						var row = 0;
								}
								@foreach (var m in Model.Meeting._MeetingMeasurables.OrderBy(x => x._Ordering).ThenBy(x => x.Measurable.AccountableUser.NotNull(y=>y.GetName())).ThenByDescending(x=>x.Measurable.Id))
								{
									ViewBag.Row = row;
									@Html.Partial("partial/ScorecardRow", new ScorecardRowVM()
								   {
									   MeetingMeasurable = m,
									   MeetingId = m.L10Meeting.Id,
									   RecurrenceId = m.L10Meeting.L10RecurrenceId,
									   Scores = Model.Scores,
									   Weeks = Model.Weeks,
								   }, new ViewDataDictionary() { { "ShowRow", (i == 0) }, { "Row", row } })
									@*<tr>
											<td class="who first1 alignRight">
												@m.Measurable.AccountableUser.NotNull(x => x.GetName())
											</td>
											<td class="who first1 alignLeft">
												<span class="newLine gray">/@m.Measurable.AdminUser.NotNull(x => x.GetName())</span>
											</td>
											<td class="measurable first1" title="@m.Measurable.Title"><span class="inlineEdit" data-type="text" data-name="title"  data-measurable="@m.Measurable.Id" data-pk="@m.Id" data-url="/L10/UpdateMeasurable" >@m.Measurable.Title</span></td>
											<td class="target direction" data-measurable="@m.Id"><span class="inlineEdit" data-type="select" data-name="direction" data-measurable="@m.Measurable.Id" data-pk="@m.Id" data-url="/L10/UpdateMeasurable" data-source="/Dropdown/Type/lessgreater" data-title="Select target direction" data-value="@m.Measurable.GoalDirection">@m.Measurable.GoalDirection.ToSymbol()</span></td>
											<td class="target value"	 data-measurable="@m.Id"><span class="inlineEdit" data-type="number" data-name="target"	   data-measurable="@m.Measurable.Id" data-pk="@m.Id" data-url="/L10/UpdateMeasurable" >@m.Measurable.Goal.ToString("0.#####")</span></td>

											@if (i == 0){
												var col = 0;
												foreach (var r in Model.Weeks){
													var found = Model.Scores.FirstOrDefault(x => r.ForWeek == x.ForWeek && x.MeasurableId == m.Measurable.Id);

													<td class="score @(r.IsCurrentWeek ? "current" : "")">
														<input data-goal="@(m.Measurable.Goal)"
															   data-goal-dir="@(m.Measurable.GoalDirection)"
															   data-row="@(row)"
															   data-col="@(col)"
															   type="text"
															   placeholder="N/A"
															   value="@(found.NotNull(x => x.Measured.NotNull(y => y.Value.ToString("0.####"))) ?? "")"
															   class="grid rt"
															   data-scoreid="@(found.NotNull(x => x.Id))"
															   data-measurable="@m.Measurable.Id"
															   data-week="@(r.ForWeek.ToJavascriptMilliseconds())"
															   id="sc_@(found != null?""+found.Id : row+"_"+col)" />
													</td>
													if (r.IsCurrentWeek){
														<td class="buttonHolder">
															<span class="glyphicon glyphicon-pushpin issuesButton issuesModal"
																  data-meeting="@Model.Meeting.Id"
																  data-recurrence="@Model.Recurrence.Id"
																  data-measurable="@found.Measurable.Id"
																  data-score="@(found.NotNull(x => x.Id))"
																@*data-message="@found.IssueMessage().EscapeHtml()"
																	data-details="@found.IssueDetails().EscapeHtml()"*>
															</span>
															<span class="glyphicon glyphicon-unchecked todoButton todoModal"
																  data-method="CreateScorecardTodo"
																  data-meeting="@Model.Meeting.Id"
																  data-recurrence="@Model.Recurrence.Id"
																  data-measurable="@found.Measurable.Id"
																  data-accountable="@found.AccountableUserId"
																  data-score="@(found.NotNull(x => x.Id))">
															</span>
														</td>
													}
													col += 1;
												}
											}
										</tr>*@
									row += 1;
								}
								@*<tr class="last"></tr>*@
							</tbody>
						</table>
						if (i == 0)
						{
							@:</div>
                    	}
                    }
				</div>
			</div>
           
		</div>
	</div>
</div>
<style>
	.ui-resizable-e {
		width: 4px;
		right: 0;
	}

	.hidden {
		display: none !important;
	}

	@@-moz-document url-prefix() {
		.hidden-firefox {
			display: none !important;
		}
	}
</style>

<script>
	$(".score input").each(function() { updateScore(this, true); });

	$(function() {
		var fixHelperModified = function(e, tr) {
			var $originals = tr.children();
			var $helper = tr.clone();
			$helper.children().each(function(index) {
				$(this).width($originals.eq(index).width())
			});
			return $helper;
		};

		var updateIndex = function(e, ui) {
			var order = [];
			var i = 0;
			$('tr', ui.item.parent()).each(function(i) {
				order.push(+$(this).attr("data-meetingmeasurable"));
			});

			var data = {
				ordering: order,
				recurrenceId: @(Model.Recurrence.Id)
			};
			$.ajax({
				url: "/L10/UpdateMeasurableOrdering",
				method: "POST",
				data: $.param(data,true),
				success:function(d){showJsonAlert(d);}
			});
		};

		$(".scorecard-table tbody").xsortable({
			items:">.reorderable",
			handle:".handle",
			helper: fixHelperModified,
			stop: updateIndex,
			placeholder:"xsortable-placeholder"
		}).disableSelection();
	});


	makeXEditable_Scorecard(".inlineEdit");

	function fixHandle() {
		$(".ui-resizable-e").css("right", -$("#ScorecardTable_Over").scrollLeft());
	}

	setTimeout(function() {
		updateScorecardNumbers();
		$(".score.current input").each(function() { updateScore(this); });
		$(".scroll-right").scrollLeft(4000);
		

		$("#ScorecardTable_Over").resizable({
			handles: 'e',
		});
		$("#ScorecardTable_Over").scroll(function(e) {
			fixHandle();
		});
		var shift = 0;
		$(".table-responsive").scroll(function(e) {
			$("#ScorecardTable_Over").removeClass("hidden");
			if ($(".table-responsive").scrollLeft() - shift < $("#ScorecardTable_Over").scrollLeft() ) {
				$("#ScorecardTable_Over").addClass("hidden");
			}
		});

	}, 200);

	var Weeks = [@(String.Join(",",Model.Weeks.Select(x=>x.ForWeek.ToJavascriptMilliseconds())))];
	//debugger;
	//new ColumnResize($("#ScorecardTable")[0]);
	//$(".scorecard-table").colResizable({
	//	liveDrag: true,
	//	gripInnerHtml: "<div class='grip'></div>",
	//	draggingClass: "dragging"
	//});
	//$("#ScorecardTable").wrap('<div id="table_container"></div>').after('<div id="bottom_anchor"></div>');
	//$("#ScorecardTable_resp").scroll(moveScroll("#ScorecardTable", "#ScorecardTable_resp"));

	//$('#ScorecardTable').cTable({
	//	width: 1300,
	//	height: 500,
	//	fCols: 3,
	//	fRows: 2
	////});
	//var onColumnSort = function (newIndexOrder, columnIndex, lastColumnIndex) {
	//	var offset = (this.options.allowSelections && this.options.showSelectionColumn) ? 1 : 0,
	//		doc = document;

	//	if (columnIndex !== lastColumnIndex) {
	//		if (lastColumnIndex > -1) {
	//			doc.getElementById("demoHdr" + (lastColumnIndex - offset)).parentNode.style.backgroundColor = "";
	//		}
	//		doc.getElementById("demoHdr" + (columnIndex - offset)).parentNode.style.backgroundColor = "#f7f7f7";
	//	}
	//};

	//var onResizeGrid = function (newWidth, newHeight) {
	//	var demoDivStyle = document.getElementById("ScorecardDiv").style;
	//	demoDivStyle.width = newWidth + "px";
	//	demoDivStyle.height = newHeight + "px";
	//};

	//var myGrid = new Grid("ScorecardGrid", {
	//	srcType: "dom",
	//	srcData: "ScorecardTable",
	//	allowGridResize: true,
	//	allowColumnResize: true,
	//	allowClientSideSorting: true,
	//	allowSelections: true,
	//	allowMultipleSelections: true,
	//	showSelectionColumn: true,
	//	onColumnSort: onColumnSort,
	//	onResizeGrid: onResizeGrid,
	//	//colAlign: gridColAlign,
	//	colBGColors: ["#fafafa"],
	//	//colSortTypes: gridColSortTypes,
	//	fixedCols: 1
	//});
	/*$('#ScorecardTable').fxdHdrCol({
		fixedCols: 3,
		width: "100%",
		height: 400,
		colModal: [
			   { width: 50, align: 'center' },
			   { width: 110, align: 'center' },
			   { width: 170, align: 'left' },
			   { width: 250, align: 'left' },
			   { width: 100, align: 'left' },
			   { width: 70, align: 'left' },
			   { width: 100, align: 'left' },
			   { width: 100, align: 'center' },
			   { width: 90, align: 'left' },
			   { width: 400, align: 'left' }
		],
		sort: true
	});*/
</script>