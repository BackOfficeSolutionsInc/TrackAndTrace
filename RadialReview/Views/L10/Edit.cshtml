@using RadialReview.Models
@model RadialReview.Models.L10.VM.L10EditVM
@{
    ViewBag.Title = "Edit L10 Meeting";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

@section top{

    <div class="jumbotron">
        <h1 class="nameFade">L10 Meeting</h1>
    </div>
}
<div class="pull-left smallBreak2">
    @{

        if (Model.Recurrence.Id != 0) {
            Html.RenderAction("Dropdown", "Permissions", new { id = Model.Recurrence.Id, type = PermItem.ResourceType.L10Recurrence });
        }
    }
</div>
<div class="clearfix"></div>

<div class="panel panel-primary ">
    <div class="panel-heading">
        <h3 class="panel-title">Edit L10 Meeting</h3>
    </div>
    <div class="panel-body form-horizontal">
        <form class="" action="/L10/Edit" method="POST">
            <div class="form-group">
                <label class="col-sm-2 control-label alignLeft">Meeting Name:</label>
                <div class="col-sm-10">
                    @Html.TextBoxFor(x => x.Recurrence.Name, new { @class = "form-control editable meeting-name", style = "width:100%;", placeholder = "Add a name for the meeting..." })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label alignLeft">Is Leadership Team:</label>
                <div class="col-sm-10">
                    @Html.CheckBoxFor(x => x.Recurrence.IsLeadershipTeam, new { @class = "checkbox editable", style = "" })
                </div>
            </div>
            <hr />


            <div class="panel-group" id="accordion1">
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingOne">
                        <h4 class="panel-title">
                            <a role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                Attendees
                            </a>
                            <div class="list-count pull-right"></div>
                        </h4>
                    </div>
                    <div id="collapseOne" class="panel-collapse collapse in attendee" role="tabpanel" aria-labelledby="headingOne">
                        <div class="panel-body">
                            <div class="form-group">
                                @*<label class="col-sm-3 control-label">Members:</label>*@
                                <div class="col-sm-12">
                                    <label>Attendees</label>
                                    @Html.ListBoxFor(x =>
                        x.SelectedMembers,
                        Model.PossibleMembers.ToSelectList(x => x.GetNameAndTitle(), x => x.Id).OrderBy(x => x.Text),
                        new { @class = "Xselect2  duel-list form-control attendee editable", style = "max-width:600px;width:100%;", multiple = "", placeholder = "Click here or begin typing a name..." })
                                    <br />
                                    <div>
                                        <label>Default To-do Owner:</label>
                                    </div>
                                    <div class="col-sm-"><select name='@Html.NameFor(x => x.Recurrence.DefaultTodoOwner).ToHtmlString()' class="select2 form-control default-todo-list editable"></select></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingThree">
                        <h4 class="panel-title">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                Scorecard
                            </a>
                            <div class="list-count pull-right"></div>
                        </h4>
                    </div>
                    <div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
                        <div class="panel-body">
                            @Html.ListBoxFor(x =>
                                x.SelectedMeasurables,
                                Model.PossibleMeasurables.ToSelectList(x => x.Title + " (Owner: " + x.AccountableUser.GetName() + ")", x => x.Id).OrderBy(x => x.Text),
                                new { @class = "Xselect2 duel-list form-control measurables editable", style = "max-width:600px;width:100%;", multiple = "", placeholder = "Click here or begin typing a measurable..." })


                            <br />
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Include Individual To-do Completion:</label>
                                <div class="col-sm-5">@Html.CheckBoxFor(x => x.Recurrence.IncludeIndividualTodos, new { @class = "editable", style = "margin-top: 11px;" })</div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Include Aggregate To-do Completion:</label>
                                <div class="col-sm-5">@Html.CheckBoxFor(x => x.Recurrence.IncludeAggregateTodoCompletion, new { @class = "editable", style = "margin-top: 11px;" })</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingTwo">
                        <h4 class="panel-title">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                @Html.Organization().Settings.RockName
                            </a>
                            <div class="list-count pull-right"></div>
                        </h4>
                    </div>
                    <div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                        <div class="panel-body">
                            @Html.ListBoxFor(x =>
                                      x.SelectedRocks,
                                      Model.PossibleRocks.ToSelectList(x => x.ToFriendlyString(), x => x.Id).OrderBy(x => x.Text),
                                      new { @class = "Xselect2  duel-list form-control rocks editable", style = "max-width:600px;width:100%;", multiple = "", placeholder = "Click here or begin typeing one of your " + Html.Organization().Settings.RockName + "..." })
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingIDS">
                        <h4 class="panel-title">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseIDS" aria-expanded="false" aria-controls="collapseIDS">
                                IDS
                            </a>
                            <div class="list-count pull-right"></div>
                        </h4>
                    </div>
                    <div id="collapseIDS" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingIDS">

                        <div class="panel-body ids">
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Prioritization Method:</label>
                                <div class="col-sm-4">@Html.EnumDropDownListFor(x => x.Recurrence.Prioritization, new { @class = "editable form-control", style = "" }) </div>
                            </div>
                            <div class="clearfix"></div>
                            <div class="well smallBreak2" style="margin:30px">
                                <div class="">
                                    <dl>
                                        <dt>Rank 1, 2, & 3 </dt>
                                        <dd>Select the 1<sup>st</sup>, 2<sup>nd</sup>, and 3<sup>rd</sup> most important issue to discuss. After discussing, select another three to prioritize.</dd>
                                        <small><i>*This is the preferred method.</i></small>
                                    </dl>
                                    <dl>
                                        <dt>Priority</dt>
                                        <dd>Vote on which issue to talk about. Issue with the most votes has the highest priority.</dd>
                                    </dl>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingFour">
                        <h4 class="panel-title">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                                Page Durations
                            </a>
                        </h4>
                    </div>
                    <div id="collapseFour" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingFour">
                        <div class="panel-body durations">
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Agenda Item Timer:</label>
                                <div class="col-sm-5">
                                    @Html.DropDownList(Html.NameFor(x => x.Recurrence.CountDown).ToHtmlString(), new SelectList(new[] { new { Value = "true", Text = "Count down" }, new { Value = "false", Text = "Count up" } }, "Value", "Text", Model.Recurrence.CountDown), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Segue duration (minutes):</label>
                                <div class="col-sm-5">
                                    @Html.TextBox(Html.NameFor(x => x.Recurrence.SegueMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.SegueMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Scorecard duration (minutes):</label>
                                <div class="col-sm-5">
                                    @Html.TextBox(Html.NameFor(x => x.Recurrence.ScorecardMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.ScorecardMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">@Html.Organization().Settings.RockName Review duration (minutes):</label>
                                <div class="col-sm-5">
                                    @Html.TextBox(Html.NameFor(x => x.Recurrence.RockReviewMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.RockReviewMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Headlines duration (minutes):</label>
                                <div class="col-sm-5">
                                    @Html.TextBox(Html.NameFor(x => x.Recurrence.HeadlinesMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.HeadlinesMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Todo List duration (minutes):</label><div class="col-sm-5">
                                    @Html.TextBox(Html.NameFor(x => x.Recurrence.TodoListMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.TodoListMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">IDS duration (minutes):</label>
                                <div class="col-sm-5">@Html.TextBox(Html.NameFor(x => x.Recurrence.IDSMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.IDSMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })</div>
                            </div>
                            <div class="form-group">
                                <label class="col-sm-3 control-label">Conclusion duration (minutes):</label>
                                <div class="col-sm-5">@Html.TextBox(Html.NameFor(x => x.Recurrence.ConclusionMinutes).ToHtmlString(), String.Format("{0:0.##}", Model.Recurrence.ConclusionMinutes), new { @class = "select2 form-control editable", type = "number", min = "0", step = "any", max = "500" })</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingFive">
                        <h4 class="panel-title">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                                Advanced
                            </a>
                        </h4>
                    </div>
                    <div id="collapseFive" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingFive">

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label class="col-sm-6 control-label">Transcribe Meeting :</label>
                                    <div class="col-sm-6">@Html.CheckBoxFor(x => x.Recurrence.EnableTranscription, new { @class = "editable", style = "margin-top: 11px;" }) <span class="gray">(Chrome Only!)</span></div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="panel">
                                    <div class="panel-body">
                                        Use a microphone to transcribe the meeting into an archive. This is a beta feature.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>




    @*<hr />
        <hr />
        <div class="form-group">
            <div class="col-sm-12">
                <label>Scorecard Items</label>
            </div>
        </div>
        <hr />
        <div class="form-group">
            @*<label class="col-sm-3 control-label">@Html.Organization().Settings.RockName:</label>*
            <div class="col-sm-12">
                <label></label>
            </div>
        </div>*@
    <hr />


    @*<div class="form-group">
            <label class="col-sm-3 control-label">Default To-do Owner:</label>
            <div class="col-sm-9"><select name='@Html.NameFor(x => x.Recurrence.DefaultTodoOwner).ToHtmlString()' class="select2 form-control default-todo-list editable"></select></div>
        </div>
        <div class="form-group">
            <label class="col-sm-3 control-label">Show Individual To-do Completion:</label>
            <div class="col-sm-9">@Html.CheckBoxFor(x => x.Recurrence.IncludeIndividualTodos, new { @class = "editable", style = "margin-top: 11px;" })</div>
        </div>
        <div class="form-group">
            <label class="col-sm-3 control-label">Show Aggregate To-do Completion:</label>
            <div class="col-sm-9">@Html.CheckBoxFor(x => x.Recurrence.IncludeAggregateTodoCompletion, new { @class = "editable", style = "margin-top: 11px;" })</div>
        </div>

        <div class="form-group">
            <label class="col-sm-3 control-label">Transcribe Meeting :</label>
            <div class="col-sm-9">@Html.CheckBoxFor(x => x.Recurrence.EnableTranscription, new { @class = "editable", style = "margin-top: 11px;" }) <span class="gray">(Chrome Only!)</span></div>
        </div>*@

    <br />
    @Html.SecuredHiddenFor(x => x.Recurrence.Id)
    @Html.SecuredHiddenFor(x => x.Recurrence.CreateTime)
    @Html.SecuredHiddenFor(x => x.Recurrence.OrganizationId)
    @Html.SecuredHiddenFor(x => x.Recurrence.MeetingInProgress)
    @Html.SecuredHiddenFor(x => x.Recurrence.CreatedById)
    @Html.SecuredHiddenFor(x => x.Recurrence.VideoId)
    @Html.SecuredHiddenFor(x => x.Recurrence.HeadlinesId)
    @Html.SecuredHiddenFor(x => x.Recurrence.OrderIssueBy)
    @Html.SecuredHiddenFor(x => x.Recurrence.VtoId)

    @Html.HiddenFor(x => x.Return)
    <div class="alignCenter">
        <input class="btn btn-primary" type="submit" value="Submit" />
    </div>
    <br />
    @if (Model.Recurrence.Id != 0) {
        <div class="alignCenter">
            <div class="btn btn-danger" onclick="@Html.ShowModal("Are you sure you want to delete this meeting?", "/L10/Delete/", "/L10/Delete/" + Model.Recurrence.Id, onCompleteFunction: "goL10")">Delete meeting</div>
        </div>
    }
    </form>
</div>
</div>



@using (Html.BeginStyles()) {

    <link href="~/Content/bootstrap-duallistbox.css" rel="stylesheet" />
    <style>
        .durations .form-group {
            margin-bottom: 4px;
        }
    </style>
}


@using (Html.BeginScripts()) {

    <script src="~/Scripts/components/jquery.bootstrap-duallistbox.js"></script>
    <script>

        var selectedTodoList = @Model.Recurrence.DefaultTodoOwner;
        var changes = false;

        $("form").on("submit", function(e) {
            if ($(".meeting-name").val().trim() == "") {
                clearAlerts();
                showAlert("Your meeting must have a name");
                e.preventDefault();
                $(".panel-collapse").collapse('hide');
                return false;
            }

            if ($("select.attendee [data-sortindex]").length==0 && $("select.attendee [selected]").length==0) {
                clearAlerts();
                showAlert("You must have at least one attendee.");
                e.preventDefault();
                $(".attendee.panel-collapse").collapse('show');
                return false;
            }
            changes = false;
        });

        $(function() {

            $(".editable").on("keyup", function() {
                changes = true;
            });

            $(".editable").on("change", function() {
                changes = true;
            });
        });

        function updateTodoList() {
            var found = $(".attendee.duel-list").val();
            if (found != null && found.length>0) {
                $(".default-todo-list").removeClass("disable").html("");
                for(var i=0;i<found.length;i++)
                {
                    var text = $(".attendee.duel-list [value=" + found[i] + "]").text();
                    var selected = +found[i] == selectedTodoList ? "selected" : "";
                    $(".default-todo-list").append("<option value='" + found[i]+ "' " + selected + ">"+text+"</option>");
                }
            } else {
                $(".default-todo-list").addClass("disable").html("<option value='-1' selected disabled>Add an attendee first...</option>");
            }


        }


        $(".default-todo-list").on("change", function() {
            selectedTodoList = $(this).val();
        });

        $(".attendee").on("change", function() {
            updateTodoList();
        });


        function goL10() {
            window.location = "/L10";
        }

        //$(".select2").hide();
        var listRocks = $('.duel-list.rocks').bootstrapDualListbox({
            preserveSelectionOnMove: 'moved',
            moveOnSelect: false,
            moveSelectedLabel: "Add selected",
            moveAllLabel: "Add all",
            nonSelectedFilter: '@Model.PossibleRocks.Where(x=>x.Period!=null).Select(x=>x.Period).OrderByDescending(x=>x.EndTime).FirstOrDefault().NotNull(x=>x.Name)',
            infoTextFiltered:'<span class="label label-warning">This list is filtered</span> {0} from {1}'

        });
        var listAttendees = $('.duel-list.attendee').bootstrapDualListbox({
            preserveSelectionOnMove: 'moved',
            moveOnSelect: false,
            moveSelectedLabel: "Add selected",
            moveAllLabel: "Add all",
            infoTextFiltered:'<span class="label label-warning">This list is filtered</span> {0} from {1}'
        });
        var listScorecard = $('.duel-list.measurables').bootstrapDualListbox({
            preserveSelectionOnMove: 'moved',
            moveOnSelect: false,
            moveSelectedLabel: "Add selected",
            moveAllLabel: "Add all",
            infoTextFiltered:'<span class="label label-warning">This list is filtered</span> {0} from {1}'
        });

        $(".panel-collapse").on('show.bs.collapse', function () {
            var $this = $(this);
            $(".panel-collapse").not($this).collapse('hide');
        });


        function recount() {
            $(".duel-list").each(function() {
                var selected = $(this).val();
                var count = 0;
                if (selected != null)
                    count = selected.length;



                $(this).closest(".panel").find(".list-count").html("<span class='gray'>x"+count+"</span>");
            });
        }

        $(".duel-list").on("change", recount);

        recount();

        @*
		///OLD SELECT2 CODE
		$(".select2.attendee").select2({
			/*matcher: function (term, text) {
				var split = text.text.split("(")[0].split(" ");
				if (!term || !term.term)
					return false;
				var t = term.term.toUpperCase();
				for (var i = 0; i < split.length; i++) {
					var s = split[i].toUpperCase();
					if ($.trim(s) == '')
						continue;
					if (s.indexOf(t) == 0)
						return true;
				}
				return false;
			},*/
		});
		$(".select2.measurables,.select2.rocks").select2({
			/*matcher: function (term, text) {
				var split = text.text.split("(")[0].split(" ");
				var t = term.toUpperCase();
				for (var i = 0; i < split.length; i++) {
					var s = split[i].toUpperCase();
					if ($.trim(s) == '')
						continue;
					if (s.indexOf(t) == 0)
						return true;
				}
				return false;
			}*/
		});
		*@
        window.onbeforeunload = function(f) {
            if (changes) {
                return "Leave without saving?";
            }

        };

        $(function() {
            updateTodoList();
        });

        //$(".measurables, .attendee").fadeIn();
    </script>
}