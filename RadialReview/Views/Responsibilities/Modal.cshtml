@model RadialReview.Models.ViewModels.ResponsibilityViewModel
@using RadialReview.Models.Enums
@{
	ViewBag.Title = "Modal";
}

<div class="form">
	@Html.HiddenFor(x => x.Id)
	@Html.HiddenFor(x => x.ResponsibilityGroupId)
	<div class="row">
		<div class="col-sm-3">
			<label>Question Type:</label>
		</div>
		<div class="col-sm-9 catContainer">
			@Html.DropDownListFor(x => x.CategoryId, Model.Categories.OrderBy(x => x.Id == -1).ThenBy(y => y.Id == 1).ThenBy(y => y.Id).Select(x =>
					  new SelectListItem() {
						  Selected = (x.Id == Model.CategoryId),
						  Text = x.Category.Translate(),
						  Value = "" + x.Id
					  }), new { id = "positionSelector", @class = "form-control" })
		</div>
		<div class="col-sm-5 hidden" id="newCategory">
			@Html.TextBoxFor(x => x.NewCategory, new { id = "newCategoryInput", placeholder = "New category name", @class = "form-control" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Importance:</label>
		</div>
		<div class="col-sm-9">
			@Html.EnumDropDownListFor(x => x.Weight, new { @class = "form-control" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Importance:</label>
		</div>
		<div class="col-sm-9">
			@Html.EnumDropDownListFor(x => x.QuestionType, new { id = "questionType", @class = "form-control", onchange = "changeQuestion()" })
		</div>
	</div>
	<div class="questionTypeExtra" style="@(Model.QuestionType==RadialReview.Models.Enums.QuestionType.Radio?"":"display:none;")">
		<div class="smallBreak2"></div>

		<div class="row">
			<div class="col-sm-3">
				<label>Radio Options (separate by ~):</label>
			</div>
			<div class="col-sm-9">
				@Html.TextAreaFor(x => x.Arguments, new { @class = "form-control" })
			</div>
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Question:</label>
		</div>
		<div class="col-sm-9">
			@Html.TextBoxFor(x => x.Responsibility, new { @class = "form-control" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Required:</label>
		</div>
		<div class="col-sm-1">
			@Html.CheckBoxFor(x => x.Required, new { @class = "checkbox" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Enabled:</label>
		</div>
		<div class="col-sm-1">
			@Html.CheckBoxFor(x => x.Active, new { @class = "checkbox" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Anonymous:</label>
		</div>
		<div class="col-sm-1">
			@Html.CheckBoxFor(x => x.Anonymous, new { @class = "checkbox" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Ask about:</label>
		</div>
		<div class="col-sm-1">
			<select class="form-control" multiple="true" name="@Html.NameFor(x=>x.OnlyAsk)" style="width: 128px;height: 128px;padding: 0;overflow: auto;">
				@foreach (var a in Enum.GetValues(typeof(AboutType))) {
					<option value="@((AboutType)a)" selected>@a</option>
				}
			</select>

		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Section:</label>
		</div>
		<div class="col-sm-9">
			@Html.DropDownListFor(x => x.SectionId, Model.SectionDropdown.OrderBy(x => x.Text), new { id = "positionSelector", @class = "form-control" })
		</div>
	</div>
	<div class="smallBreak2"></div>
	<div class="row">
		<div class="col-sm-3">
			<label>Update Outstanding Reviews:</label>
		</div>
		<div class="col-sm-1">
			@Html.CheckBoxFor(x => x.UpdateOutstandingReviews, new { @class = "checkbox" })
		</div>
	</div>
</div>
<script>
	function Update() {
		if ($("#positionSelector").val() == -1) {
			$("#newCategory").removeClass("hidden");
			$(".catContainer").addClass("col-sm-4");
			$(".catContainer").removeClass("col-sm-9");
		} else {
			$("#newCategory").addClass("hidden");
			$("#newCategoryInput").val(null);
			$(".catContainer").addClass("col-sm-9");
			$(".catContainer").removeClass("col-sm-4");
		}
	}

	$(function () {
		$("#positionSelector").change(function () {
			Update();
		});
		Update();
	});

	function verify() {
		if ($("[name='CategoryId']").val() == -1 && !$("[name='NewCategory']").val())
			return "New category name is required.";
		if (!$("[name='Responsibility']").val())
			return "Responsibility is required.";
		return true;
	}

	function changeQuestion() {
		if ($("#questionType").val() == "@((int)RadialReview.Models.Enums.QuestionType.Radio)") {
			$(".questionTypeExtra").show();
		} else {
			$(".questionTypeExtra").hide();
		}

	}
</script>