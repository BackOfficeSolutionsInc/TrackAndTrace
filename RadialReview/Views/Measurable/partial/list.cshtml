@{
	var headers = (ViewBag.AddHeaders == null || ((bool)ViewBag.AddHeaders) == true);
	var controller = (ViewBag.AddController != null && ((bool)ViewBag.AddController) == true);
	var forceMin = ViewBag.ForceMin == null ? "" : "," + ((int)ViewBag.ForceMin);
	var reorderable = (ViewBag.Reorderable != null && ((bool)ViewBag.Reorderable) == true);
	var disableName = ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false;
	var editOwner = ViewBag.EditOwner != null && ((bool)ViewBag.EditOwner) == false;
}

<div @(headers ? "ng-app=L10App" : "") class="scorecard meeting-page app" style="clear: both;">
	<div @(headers || controller ? "ng-controller=L10Controller" : "")>
		<div class="row">
			<div class="col-md-12">
				<div class="component">
					<div class="clearfix"></div>
					<div style="position: relative;" ng-hide="(model.Scorecard|transform:this).Measurables.length==0">
						<div class="table-responsive scroll-right" style1="min-height: 200px;">
							<table id="ScorecardTable" class="scorecard-table ng-cloak">
								<thead>
									<tr>
										@if (reorderable)
										{
											<th>&nbsp;</th>
										}
										@if (ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false)
										{
											<th>&nbsp;</th>
											<th>&nbsp;</th>
										}
										<th>&nbsp;</th>
										<th>&nbsp;</th>
										<th>&nbsp;</th>
										<th ng-repeat="week in (model.Scorecard|transform:this).Weeks | filter:filters.byRange('ForWeek',model.date.startDate,model.date.endDate,true)" class="date" ng-class="{current:week.IsCurrentWeek}" colspan="{{week.IsCurrentWeek ? 1 : 1}}">
											{{functions.subtractDays(week.DisplayDate,0) | date: (model.Scorecard|transform:this).DateFormat1}}
										</th>
									</tr>
									<tr>
										@if (ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false)
										{
											<th class="heading who alignRight">Accountable</th>
											<th class="heading who alignLeft "><span class="newLine gray">/Admin</span></th>
										}
										<th class="heading measurable">Measurable</th>
										<th class="heading target" colspan="2">Goal</th>
										<th ng-repeat="week in (model.Scorecard|transform:this).Weeks | filter:filters.byRange('ForWeek',model.date.startDate,model.date.endDate,true)" class="date" ng-class="{current:week.IsCurrentWeek}" colspan="{{week.IsCurrentWeek ? 1 : 1}}">
											{{functions.subtractDays(week.DisplayDate,-6) | date: (model.Scorecard|transform:this).DateFormat2}}
										</th>
									</tr>
								</thead>
								<tbody>
									<tr ng-class="{IsDivider: measurable.IsDivider}" data-measurable="{{measurable.Id}}" class="specialClass @(reorderable ? "reorderable" : "")" ng-repeat="measurable in (model.Scorecard|transform:this).Measurables  | orderBy: ['Ordering']">
										@if (reorderable)
										{
											<td class="handle-cell" ng-class="{handle: measurable.IsDivider}"><div class="icon fontastic-icon-three-bars icon-rotate handle"></div></td>
										}
										@if (disableName)
										{
											<td class="who first1 alignRight @(editOwner?"inlineEdit":"")" ng-class="{handle: measurable.IsDivider}"
												@if (editOwner) { 
													@: data-source="/Dropdown/MeetingMembers/{{meetingId}}?userId=true"
													@: data-placement="right"
													@: data-url="/L10/UpdateArchiveMeasurable"
													@: data-type="select"
													@: data-name="accountable"
													@: data-pk="{{measurable.Id}}_{{meetingId}}"
												}>
												{{measurable.Owner.Name}}
											</td>
											<td class="who first1 alignLeft" ng-class="{handle: measurable.IsDivider}">
												<span class="newLine gray @(editOwner?"inlineEdit":"")"
													@if (editOwner) { 
														@: data-placement="right"
														@: data-source="/Dropdown/MeetingMembers/{{meetingId}}?userId=true"
														@: data-url="/L10/UpdateArchiveMeasurable"
														@: data-type="select"
														@: data-name="admin"
														@: data-pk="{{measurable.Id}}_{{meetingId}}"
													}>/{{measurable.Admin.Name}}</span>
											</td>
										}
										<td class="measurable first1" title="{{measurable.Name}}" ng-class="{handle: measurable.IsDivider}">
											<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
											      data-type="text"
											      data-name="title"
											      data-measurable="{{measurable.Id}}"
											      data-pk="{{measurable.Id}}_{{meetingId}}"
											      data-url="/L10/UpdateArchiveMeasurable">{{measurable.Name}}</span>
										</td>
										<td class="target direction" data-measurable="{{measurable.Id}}" ng-class="{handle: measurable.IsDivider}">
											<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
											      class="direction_{{measurable.Direction}}"
											      data-type="select"
											      data-name="direction"
											      data-measurable="{{measurable.Id}}"
											      data-pk="{{measurable.Id}}_{{meetingId}}"
											      data-url="/L10/UpdateArchiveMeasurable"
											      data-source="/Dropdown/Type/lessgreater"
											      data-title="Select target direction"
											      data-value="{{measurable.Direction}}"></span>
										</td>
										<td class="target value" data-measurable="{{measurable.Id}}" ng-class="{handle: measurable.IsDivider}">
											<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
											      class="numeric inlineEdit modifiers {{measurable.Modifiers}}"
											      data-type="text"
											      data-name="target"
											      data-measurable="{{measurable.Id}}"
											      data-pk="{{measurable.Id}}_{{meetingId}}"
											      data-url="/L10/UpdateArchiveMeasurable">{{(measurable.Target)*1}}</span>
											<span class="inlineEdit1 gray modifiers-{{measurable.Modifiers}}" data-type="select" data-source="/Dropdown/Type/unitType" data-name="unitType" data-measurable="{{measurable.Id}}" data-pk="{{measurable.Id}}_{{meetingId}}" data-url="/L10/UpdateMeasurable"></span>
										</td>

										<td ng-repeat="week in (model.Scorecard|transform:this).Weeks | filter:filters.byRange('ForWeek',model.date.startDate,model.date.endDate@(forceMin))" class="score" ng-class="{current:week.IsCurrentWeek}">
											<input ng-class="{'inlineEdit': measurable.Disabled!=true}"
											       data-goal="{{measurable.Target}}"
											       data-goal-dir="{{measurable.Direction}}"
											       data-row="{{$parent.$index}}"
											       data-col="{{$index}}"
											       type="text"
											       placeholder="N/A"
											       ng-model-options="{debounce: 75}"
											       ng-model="functions.lookupScore(week.ForWeekNumber,measurable.Id).Measured"
											       class="grid rt {{functions.scorecardColor(functions.lookupScore(week.ForWeekNumber,measurable.Id))}}"
											       data-scoreid="{{Id}}"
											       data-measurable="{{measurable.Id}}"
											       data-week="{{week.ForWeekNumber}}"
											       fcsa-number="{{functions.getFcsa(measurable)}}"
											       ng-change="functions.sendUpdate(functions.lookupScore(week.ForWeekNumber,measurable.Id))"
												@*id="{{functions.scorecardId(functions.lookupScore(week.ForWeekNumber,measurable.Id),$parent.$index,$index)}}" />*@
											       id="{{functions.scorecardId(model,$parent.$index,$index)}}" />

										</td>
									</tr>
								</tbody>
							</table>
						</div>
						<table id="ScorecardTable_Over" class="scorecard-table hidden-xs hidden-sm ng-cloak resizable">
							<thead>
								<tr>
									@if (reorderable)
									{
										<th>&nbsp;</th>
									}
									@if (ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false)
									{
										<th>&nbsp;</th>
										<th>&nbsp;</th>
									}
									<th>&nbsp;</th>
									<th>&nbsp;</th>
									<th>&nbsp;</th>
								</tr>
								<tr>
									@if (ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false)
									{
										<th class="heading who alignRight">Accountable</th>
										<th class="heading who alignLeft "><span class="newLine gray">/Admin</span></th>
									}
									<th class="heading measurable">Measurable</th>
									<th class="heading target" colspan="2">Goal</th>
								</tr>
							</thead>
							<tbody>
								<tr ng-repeat="measurable in (model.Scorecard|transform:this).Measurables | orderBy: ['Ordering']">
									@if (reorderable)
									{
										<td class="handle-cell" ng-class="{handle: measurable.IsDivider}"><div class="icon fontastic-icon-three-bars icon-rotate handle"></div></td>
									}

									@if (ViewBag.DisableName == null || ((bool)ViewBag.DisableName) == false)
									{
										<td class="who first1 alignRight @(editOwner?"inlineEdit":"")" ng-class="{handle: measurable.IsDivider}"
											@if (editOwner) { 
												@:data-source="/Dropdown/MeetingMembers/{{meetingId}}?userId=true"
												@: data-placement="right"
												@: data-url="/L10/UpdateArchiveMeasurable"
												@: data-type="select"
												@: data-name="accountable"
												@: data-pk="{{measurable.Id}}_{{meetingId}}"
											}>
											{{measurable.Owner.Name}}
										</td>
										<td class="who first1 alignLeft"  ng-class="{handle: measurable.IsDivider}"><span class="newLine gray @(editOwner?"inlineEdit":"")"
											                                                                            @if (editOwner) { 
												                                                                            @: data-placement="right"
												                                                                            @: data-source="/Dropdown/MeetingMembers/{{meetingId}}?userId=true"
												                                                                            @: data-url="/L10/UpdateArchiveMeasurable"
												                                                                            @: data-type="select"
												                                                                            @: data-name="admin"
												                                                                            @: data-pk="{{measurable.Id}}_{{meetingId}}"
											                                                                            }>/{{measurable.Admin.Name}}</span></td>
									}
									<td class="measurable first1" title="{{measurable.Name}}"  ng-class="{handle: measurable.IsDivider}">
										<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
										      data-type="text"
										      data-name="title"
										      data-measurable="{{measurable.Id}}"
										      data-pk="{{measurable.Id}}_{{meetingId}}"
										      data-url="/L10/UpdateArchiveMeasurable">{{measurable.Name}}</span>
									</td>
									<td class="target direction" data-measurable="{{measurable.Id}}"  ng-class="{handle: measurable.IsDivider}">
										<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
										      class="direction_{{measurable.Direction}}"
										      data-type="select"
										      data-name="direction"
										      data-measurable="{{measurable.Id}}"
										      data-pk="{{measurable.Id}}_{{meetingId}}"
										      data-url="/L10/UpdateArchiveMeasurable"
										      data-source="/Dropdown/Type/lessgreater"
										      data-title="Select target direction"
										      data-value="{{measurable.Direction}}"></span>
									</td>
									<td class="target value" data-measurable="{{measurable.Id}}">
										<span ng-class="{'inlineEdit': measurable.Disabled!=true}"
										      class="numeric modifiers {{measurable.Modifiers}}"
										      data-type="text"
										      data-name="target"
										      data-measurable="{{measurable.Id}}"
										      data-pk="{{measurable.Id}}_{{meetingId}}"
										      data-url="/L10/UpdateArchiveMeasurable">{{(measurable.Target)*1}}</span>
										<span class="inlineEdit1 gray modifiers-{{measurable.Modifiers}}" data-type="select" data-source="/Dropdown/Type/unitType" data-name="unitType" data-measurable="{{measurable.Id}}" data-pk="{{measurable.Id}}_{{meetingId}}" data-url="/L10/UpdateMeasurable"></span>
									</td>
								</tr>
							</tbody>
						</table>
					</div>
					<div class="gray" style="padding: 30px 15px;" ng-show="(model.Scorecard|transform:this).Measurables.length==0">
						No measurables fit your search criteria.
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


@using (Html.BeginStyles())
{
	<link href="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet" />
	<style>
		.inlineEdit:hover {
			text-decoration: none;
			border-bottom: dashed 1px #08C;
			cursor: pointer;
		}

		.grid.gray {
			background-color: #eee;
			height: 100%;
		}
	</style>
}
@using (Html.BeginScripts())
{
	<script src="~/Scripts/jquery/jquery.ui.sortable.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js"></script>
	<script src="~/Scripts/L10/L10Scorecard.js"></script>
	<script>
		$.fn.editable.defaults.mode = 'popup';

		$("body").on('click', ".inlineEdit", function () {
			if (!$(this).attr("editable")) {
				var placement = $(this).attr("data-placement")||"left";
				$(this).editable({
					savenochange: true,
					validate: function(value) {
						if ($(this).hasClass("numeric")){
							var regex = /^[+-]?((\d+(\.\d*)?)|(\.\d+))$/;
							if(! regex.test(value)) {
								return 'This field must be a number';
							}
						}
						if ($.trim(value) == '') {
							return 'This field is required';
						}
					},
					placement: placement,
					success: function (data) {

						/*var items = $(".grid[data-measurable=" + $(this).data("measurable") + "]");

						if ($(this).data("name") == "direction") {
							$(items).attr("data-goal-dir", $(this).attr("data-value"));
						} else if ($(this).data("name") == "target") {
							$(items).attr("data-goal", $(this).attr("data-value"));
						}
						$(items).each(function (d) {
							updateScore(this);
						});
						debugger;*/
					}
				});
				$(this).attr("editable", "1");
				$(this).click();
			}
		});
		$(function () {
			fixHelperModified = function (e, tr) {
				var $originals = tr.children();
				var $helper = tr.clone();
				$helper.children().each(function (index) {
					$(this).width($originals.eq(index).width());
				});
				return $helper;
			};

			var updateIndex = function (e, ui) {
				var order = [];
				var i = 0;
				$('tr', ui.item.parent()).each(function (i) {
					//if ($(this).attr("data-isvisible")=="true"){
						order.push(+$(this).attr("data-measurable"));
					//}
				});

				var data = {
					ordering: order,
					recurrenceId: angular.element(document.querySelector('#ScorecardContainer')).scope().meetingId
				};
				$.ajax({
					url: "/L10/UpdateRecurrenceMeasurableOrdering",
					method: "POST",
					data: $.param(data, true),
					success: function(d) {
						showJsonAlert(d);
						angular.element(document.querySelector('#ScorecardContainer')).scope().$apply();
					}
				});
			};

			$(".scorecard-table tbody").xsortable({
				items: ">.reorderable",
				handle: ".handle",
				helper: fixHelperModified,
				stop: updateIndex,
				placeholder: "xsortable-placeholder"
			}).disableSelection();
		});

		/*
		$(function() {
			$(".inlineEdit").editable({
				savenochange: true,
				validate: function(value) {
					if ($.trim(value) == '') {
						return 'This field is required';
					}
				},
				success: function(data) {

					var items = $(".grid[data-measurable=" + $(this).data("measurable") + "]");

					if ($(this).data("name") == "direction") {
						$(items).attr("data-goal-dir", $(this).attr("data-value"));
					} else if ($(this).data("name") == "target") {
						$(items).attr("data-goal", $(this).attr("data-value"));
					}
					$(items).each(function(d) {
						updateScore(this);
					});
					debugger;
				}
			});
		});*/
	</script>
}