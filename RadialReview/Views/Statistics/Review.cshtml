@model RadialReview.Models.ReviewsModel
@{
    ViewBag.Title = "Review";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Page = "Stats";
    ViewBag.ExtraTabs = ExtraTab.Create("Stats", "/Statistics/Review/" + Model.Id);
    ViewBag.Subheading = "Statistics for '" + Model.ReviewName + "'";

}
@using (Html.BeginStyles())
{
    <link href="~/Content/Chart/PieChart.css" rel="stylesheet" />
}

@section top{
    <div class="jumbotron">
        <h1>Reports</h1>
    </div>
}

@section header{
    @Html.Partial("_ReviewsHeader")
}


<div class="panel panel-primary startHiddenGroup">
    <div class="panel-heading">
        <h3 class="panel-title">Review progress</h3>
    </div>

    <div class="panel-body">
        <div class="row">
            <div class="col-md-6">
                <h2 class="alignCenter noMargin">Reviews Completed</h2>
                <div id="pie1" style="min-height:400px;"></div>
            </div>
            <div class="col-md-6">
                <h2 class="alignCenter noMargin">Reports Completed</h2>
                <div id="pie2" style="min-height:400px;"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3 smallPad">
                <div class="stats">
                    <h1 id="reviewsCompleted" class="scramble" data-range="99"></h1>
                    <h6>reviews completed</h6>
                </div>
            </div>
            <div class="col-sm-3 smallPad">
                <div class="stats">
                    <h1 id="questionsAnswered" class="scramble" data-range="1500"></h1>
                    <h6>questions answered</h6>
                </div>
            </div>
            <div class="col-sm-3 smallPad">
                <div class="stats">
                    <div class="alignCenter" style="margin-left:20px">
                        <h1 id="minutesPerReview" class="scramble" data-range="26"></h1>
                        <h5 class="scramble">mins</h5>
                    </div>
                    <h6>per review</h6>
                    <h4>(on average)</h4>
                </div>
            </div>
            <div class="col-sm-3 smallPad">
                <div class="stats">
                    <h1 id="optionalAnswered" class="scramble" data-range="200"></h1>
                    <h6>optional questions answered</h6>
                </div>
            </div>
        </div>
    </div>
    @if (ViewBag.IsManager ?? false)
    {
        <div class="panel-heading">
            <h3 class="panel-title">Individual progress</h3>
        </div>
        <div class="table-responsive">
            <table class="table table-condensed table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th class="alignCenter" style="width:10px;">Reviewed by</th>
                        <th class="alignCenter" style="width:10px;"># Reviewed</th>
                        <th class="alignCenter" style="width:150px;">Completion</th>
                        @*<th style="width:10px;">Report</th>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var review in Model.Reviews.OrderByDescending(x =>
                    {
                        double complete = Model.Reviews.Sum(n => n.Answers.Where(z => z.ByUserId == x.ForUserId).Distinct(y => y.AboutUserId).Count(y => y.Complete));
                        double total = Model.Reviews.Sum(n => n.Answers.Where(z => z.ByUserId == x.ForUserId).Distinct(y => y.AboutUserId).Count());
                        return complete / total;
                    }))
                    {
                        <tr>
                            <td class="table-hover-underline">@review.ForUser.GetNameAndTitle()</td>
                            <td class="alignCenter">
                                @Model.Reviews.Sum(x => x.Answers.Where(z => z.AboutUserId == review.ForUserId).Distinct(y => y.ByUserId).Count(y => y.Complete))/
                                @Model.Reviews.Sum(x => x.Answers.Where(z => z.AboutUserId == review.ForUserId).Distinct(y => y.ByUserId).Count())
                            </td>
                            <td class="alignCenter">
                                @Model.Reviews.Sum(x => x.Answers.Where(z => z.ByUserId == review.ForUserId).Distinct(y => y.AboutUserId).Count(y => y.Complete))/
                                @Model.Reviews.Sum(x => x.Answers.Where(z => z.ByUserId == review.ForUserId).Distinct(y => y.AboutUserId).Count())
                            </td>
                            <td>@Html.Partial("_Completion", review.GetCompletion())</td>
                            @*<td>
                                    @if (review.ForUser.GetPersonallyManaging())
                                    {
                                        <a href="/Review/Details/@review.ClientReview.Id">Report</a>
                                    }
                                </td>*@
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    }
</div>



@using (Html.BeginScripts())
{
    <script src="~/Scripts/d3/d3.v3.min.js"></script>
    <script>
        pullData();

        function pullData() {

            var interval = setInterval(function () {
                $(".scramble").each(function () {
                    if ($(this).data("range")) {
                        var max = parseInt($(this).data("range"));
                        $(this).html(Math.round((Math.random() / 2.0 + 0.5) * max));
                    }
                });
            }, 50);

            $(".scramble").addClass("scrambling");



            $.ajax({
                url: "/Data/ReviewsData/@Model.Id",
                success: function (data) {
                    data = data.Object;
                    if (true) {
                        var titles1 = [];
                        var values1 = [];
                        var colors1 = [];
                        if (data.Completion.Started > 0) {
                            titles1.push("Started");
                            values1.push(data.Completion.Started);
                            colors1.push("#8a89a6");
                        }
                        if (data.Completion.Finished > 0) {
                            titles1.push("Completed");
                            values1.push(data.Completion.Finished);
                            colors1.push("#98abc5");
                        }
                        if (data.Completion.Unstarted > 0) {
                            titles1.push("Unstarted");
                            values1.push(data.Completion.Unstarted);
                            colors1.push("#7b6888");
                        }
                        //values2 = [3, 4, 5, 6];
                        createPie("#pie1", titles1, values1, colors1);
                    }
                    if (true) {
                        var titles1 = [];
                        var values1 = [];
                        var colors1 = [];
                        if (data.Reports.Unstarted > 0) {
                            titles1.push("Unstarted");
                            values1.push(data.Reports.Unstarted);
                            colors1.push("#A05D56");
                        }
                        if (data.Reports.Started > 0) {
                            titles1.push("Started");
                            values1.push(data.Reports.Started);
                            colors1.push("#D0743C");
                        }
                        if (data.Reports.Signed > 0) {
                            titles1.push("Signed");
                            values1.push(data.Reports.Signed);
                            colors1.push("#FF8C00");
                        }
                        if (data.Reports.Visible > 0) {
                            titles1.push("Visible");
                            values1.push(data.Reports.Visible);
                            colors1.push("#FFC01D");
                        }
                        createPie("#pie2", titles1, values1, colors1);
                    }
                    clearInterval(interval);
                    $(".scramble").removeClass("scrambling");
                    $("#reviewsCompleted").html(data.Stats.ReviewsCompleted);
                    $("#questionsAnswered").html(data.Stats.QuestionsAnswered);
                    $("#minutesPerReview").html(Math.round(data.Stats.MinsPerReview));
                    $("#optionalAnswered").html(data.Stats.OptionalsAnswered);
                }
            });
        }

        var charts = 0;

        function createPie(selector, titles, values, colors) {
            var ref = 800;
            var svg = d3.select(selector).append("svg")
                            .attr("viewBox", "0 0 " + ref + " " + ref / 2)
                            .attr("height", "100%")
                            .attr("width", "100%")
                            .attr("class", "piechart")
                        .append("g");

            svg.append("g").attr("class", "slices");
            svg.append("g").attr("class", "labels");
            svg.append("g").attr("class", "lines");

            var width = ref * .7, height = ref, radius = Math.min(width, height) / 2;
            var startA = 1.7;

            var endA = startA + 2 * Math.PI;
            var center = svg.append("g").attr("class", "centerNumber").attr("transform", "translate(0,10)").style("text-anchor", "middle").append("text")
                .text(d3.sum(values));
            var centerText = svg.append("g").attr("class", "centerText").attr("transform", "translate(0,30)").style("text-anchor", "middle").append("text")
                .text("Total");

            var pie = d3.layout.pie().sort(null).startAngle(startA).endAngle(endA).value(function (d) { return d.value; });
            var arc = d3.svg.arc().outerRadius(radius * 0.8).innerRadius(radius * 0.4);
            var outerArc = d3.svg.arc().innerRadius(radius * 0.9).outerRadius(radius * 0.9);
            svg.attr("transform", "translate(" + ref / 2 + "," + ref / 2 / 2 + ")");
            var key = function (d) { return d.data.label; };
            var color = d3.scale.ordinal().domain(titles).range(colors);

            function genDat() {
                var labels = color.domain();
                return labels.map(function (label, i) {
                    return { label: label, value: values[i] }
                });
            }

            change(genDat());

            function change(data) {

                /* ------- PIE SLICES -------*/
                /*debugger;
                var shifted=pie(data);
                var by=2.35619449019;

                for(var i=0;i<shifted.length;i++)
                {
                    shifted[i].
                }*/

                var slice = svg.select(".slices").selectAll("path.slice").data(pie(data), key);

                slice.enter().insert("path")
                    .on("mouseover", function (d) {
                        center.text(d.value);
                        centerText.text(d.data.label);
                    })
                    .on("mouseout", function (d) {
                        center.text(d3.sum(values));
                        centerText.text("Total");
                    })
                    .attr("title", function (d) { return d.value; })
                    .style("fill", function (d) { return color(d.data.label); }).attr("class", "slice");

                slice.transition().duration(1000).attrTween("d", function (d) {
                    this._current = this._current || d;
                    var interpolate = d3.interpolate(this._current, d);
                    this._current = interpolate(0);
                    return function (t) {
                        return arc(interpolate(t));
                    };
                })

                slice.exit().remove();

                /* ------- TEXT LABELS -------*/

                var text = svg.select(".labels").selectAll("text")
                    .data(pie(data), key);

                text.enter()
                    .append("text")
                    .attr("dy", ".35em")
                    .text(function (d) {
                        return d.data.label;
                    });

                function resetAngle(a) {
                    return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));
                }

                function midAngle(d) {
                    return resetAngle(d.startAngle + (d.endAngle - d.startAngle) / 2);
                }


                text.transition().duration(1000)
                    .attrTween("transform", function (d) {
                        this._current = this._current || d;
                        var interpolate = d3.interpolate(this._current, d);
                        this._current = interpolate(0);
                        return function (t) {
                            var d2 = interpolate(t);
                            var pos = outerArc.centroid(d2);
                            pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                            return "translate(" + pos + ")";
                        };
                    })
                    .styleTween("text-anchor", function (d) {
                        this._current = this._current || d;
                        var interpolate = d3.interpolate(this._current, d);
                        this._current = interpolate(0);
                        return function (t) {
                            var d2 = interpolate(t);
                            return midAngle(d2) < Math.PI ? "start" : "end";
                        };
                    });

                text.exit()
                    .remove();

                /* ------- SLICE TO TEXT POLYLINES -------*/

                var polyline = svg.select(".lines").selectAll("polyline")
                    .data(pie(data), key);

                polyline.enter()
                    .append("polyline");

                polyline.transition().duration(1000)
                    .attrTween("points", function (d) {
                        this._current = this._current || d;
                        var interpolate = d3.interpolate(this._current, d);
                        this._current = interpolate(0);
                        return function (t) {
                            var d2 = interpolate(t);
                            var pos = outerArc.centroid(d2);
                            pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                            return [arc.centroid(d2), outerArc.centroid(d2), pos];
                        };
                    });

                polyline.exit()
                    .remove();
            };


        }




    </script>

}

