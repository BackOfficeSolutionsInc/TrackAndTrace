@model RadialReview.Controllers.ReviewController.TakeViewModel

@{
    ViewBag.Title = "Review";
    Layout = "~/Views/Shared/_ReviewLayout.cshtml";
}

@using RadialReview.Models
@using RadialReview.Models.Askables


@section header{

}
@section top{
    <div class="jumbotron">
        <h1>@Model.ForUser.GetName()</h1>
    </div>
}

@if (Model.Anonymous){
	<div class="hover pull-right" style="bottom: 16px; position: relative;">
		<span class="glyphicon glyphicon-lock"></span> Your feedback will be anonymous to @Model.ForUser.GetFirstName().
	</div>
}
else{
	<div class="hover pull-right" style="bottom: 16px; position: relative;">
		<span class="glyphicon glyphicon-eye-open"></span> <span class="gray">Your name will be included on your feedback to @Model.ForUser.GetFirstName().</span>
	</div>
}

@Html.HiddenFor(x => x.StartTime.Ticks)
<div class="row">
    <div class="col-md-12">
        <div>
            <div class="smallBreak"></div>
            @foreach (var group in Model.Answers.GroupBy(x => x.BaseAnswer.Askable.Category.Id).OrderByDescending(x => x.Key))
            {
                var dict = new ViewDataDictionary();
                
                var sliders =group.ToList().Where(x => x.BaseAnswer is SliderAnswer).Select(x=>x.BaseAnswer).Cast<SliderAnswer>().ToList();
				var thumbs = group.ToList().Where(x => x.BaseAnswer is ThumbsAnswer).Select(x => x.BaseAnswer).Cast<ThumbsAnswer>().ToList();
				var feedbacks = group.ToList().Where(x => x.BaseAnswer is FeedbackAnswer).Select(x => x.BaseAnswer).Cast<FeedbackAnswer>().ToList();
				var gwcs = group.ToList().Where(x => x.BaseAnswer is GetWantCapacityAnswer).Select(x => x.BaseAnswer).Cast<GetWantCapacityAnswer>().ToList();
				var values = group.ToList().Where(x => x.BaseAnswer is CompanyValueAnswer).Select(x => x.BaseAnswer).Cast<CompanyValueAnswer>().ToList();
				var rocks = group.ToList().Where(x => x.BaseAnswer is RockAnswer).Select(x => x.BaseAnswer).Cast<RockAnswer>().ToList();
				//var gwc = group.ToList().Where(x => x is GetWantCapacityAnswer).Cast<GetWantCapacityAnswer>().ToList();
                
                
                dict["Max"] = group.Count();
                
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">@group.FirstOrDefault().NotNull(x => x.BaseAnswer.Askable.Category.Category.Translate())</h3>
                    </div>
	                <div class="panel-body">
						@Html.Partial("Take/GWC",	 Tuple.Create(gwcs, Model.Editable), dict)
						@Html.Partial("Take/Values", Tuple.Create(values, Model.Editable), dict)
						@Html.Partial("Take/Rocks",  Tuple.Create(rocks, Model.Editable), dict)
		                @{dict["I"] = 0;}
		                @Html.Partial("Slider", Tuple.Create(sliders, Model.Editable), dict)
		                @{dict["I"] = sliders.Count();}
		                @Html.Partial("Thumbs", Tuple.Create(thumbs, Model.Editable), dict)
		                @{dict["I"] = sliders.Count() + thumbs.Count();}
		                @Html.Partial("Feedback", Tuple.Create(feedbacks, Model.Editable), dict)
		                @*@{dict["I"] = sliders.Count() + thumbs.Count();}
                        @Html.Partial("GetWantCap", Tuple.Create(gwc, Model.Editable), dict)*@
	                </div>
                </div>
            }
        </div>
    </div>

</div>

@section sidebar{

	<div class="">
		@Html.Partial("_User", Model.ForUser)
	</div>
	<hr/>
    <ol>
        @for (int i = 0; i < Model.OrderedPeople.Count; i++)
        {
            <li class="@(Model.OrderedPeople[i].Item2?"complete":"incomplete")"><a href="@Url.Action("take", new {id=Model.Id, page = i})">@Model.OrderedPeople[i].Item1</a></li>
        }
        <li><a href="@Url.Action("AdditionalReview", new { id = Model.Id ,page = Model.Page })">Review Others</a></li>
    </ol>
}

@using (Html.BeginScripts())
{
    <script src="~/Scripts/review/review.js"></script>
    <script src="~/Scripts/review/translateSlider.js"></script>
    <script src="~/Scripts/jquery/jquery-simple-slider.js"></script>
    <script>
        var canUpdate = true;

        function sliderUpdateInternal(self) {
            var d = { value: parseInt($(self).val()) };
            var disp = d.value;
            if (d.value == 0) {
                disp = "NA";
            }

            $("#" + $(self).attr("name") + " .rangevalue").html(disp).addClass("show");

            slideUpdate.call(self, d);

        }

        function slideUpdate(d) {
            var name = $(this).attr("name");
            /* var answers = ["Never", "Seldom", "Sometimes", "Usually", "Mostly", "Always", "Above and Beyond"];
             var div = 100 / answers.length;
             var i = Math.floor(d.value / div);

             var answer = answers[i];
             if (d.value == 0)
                 answer = "No Answer";*/
            
            var disp = d.value;
            if (d.value == 0) {
                disp = "NA";
            }

            var answer = sliderToText(d.value);

            $("#" + $(this).attr("name") + " .rangevalue").html(disp);

            $("#" + name + "_title").html(answer);
            $(this).val()
            $(this).attr("name");
        }

        $(function () {

            /*
            $(".sliderInput").slider().on('calculate', slideUpdate);//.on('click', slideUpdate).on('slideStop', slideUpdate);

            $(".sliderBar").each(function () {
                sliderUpdateInternal(this);
            });*/
            $(".sliderBar").bind("slider:changed", function (event, data) {
                // The currently selected value of the slider

                slideUpdate.call(this,data);
            });
            $(".sliderBar").each(function (d) {
                slideUpdate.call(this, this);
            });
            $('.btn-group').button();


        });
    </script>

}

@using (Html.BeginStyles())
{
    <link href="~/Content/simple-slider.css" rel="stylesheet" />
    <link href="~/Content/Review.css" rel="stylesheet" />
    <style>
        .complete a {
            /*color: #52AC52 !important;*/
        }

        .incomplete a {
            color: #D68585 !important;
        }

        textarea {
            border: 1px solid #A9A9A9;
        }
    </style>
}