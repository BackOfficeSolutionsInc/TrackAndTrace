@model RadialReview.Controllers.ReviewController.TakeViewModel

@{
	ViewBag.Title = "Review";
	Layout = "~/Views/Shared/_ReviewLayout.cshtml";
}

@using RadialReview.Models
@using RadialReview.Models.Askables


@section header{

}
@section top{
	@if (!Model.Editable)
	{
		<div class="alertBar progress">
			<div class="progress-bar progress-bar-danger" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;">
				This review is past due. This screen is read-only, you won't be able to make changes to it.
			</div>
		</div>
	}
	<div class="jumbotron">
		<h1 class="nameFade">@Model.ForUser.GetName()</h1>
	</div>
	<div class="hover" style="position: relative; bottom: -28px; padding-left: 6px; color: #FFF;">
		@if (Model.Anonymous)
		{
			@:<span class="glyphicon glyphicon-lock"></span> Your feedback will be anonymous to @(Model.ForUser.GetFirstName()). &nbsp;Only their manager will see your name.
		}
		else
		{
			@:<span class="glyphicon glyphicon-eye-open"></span>Your name will be included on your feedback to @Model.ForUser.GetFirstName().
		}
	</div>
}

@section sidebar{
	<div class="flipButton" onclick="$('.flipCard,.nameFade').toggleClass('flipped');"><span class="glyphicon glyphicon-share-alt"></span></div>
	<div class="userContainer noselect">
		<div class="flipCard">
			<figure class="front ">
				<div class="sidebar noselect">
					<div class="sidebar-contents">
						@Html.Partial("_User", Model.ForUser)
					</div>
				</div>
			</figure>
			<figure class="back">
				<div class="sidebar">
					<div class="sidebar-contents">
						<ol id="nameList">
							@for (int i = 0; i < Model.OrderedPeople.Count; i++)
							{
								<li class="@(Model.OrderedPeople[i].Item2?"complete1":"incomplete1")">
									<span class="indicator">
										<span class="progress progressIndicator">
											<span class="progress-bar @(Model.OrderedPeople[i].Item2 ? "progress-bar-success" : "progress-bar-primary progress-bar-striped")" style="width:@(Model.OrderedPeople[i].Item3)%"></span>
										</span>
									</span>
									<a class="@(i == Model.Page ? "currentPage" : "")" href="@Url.Action("take", new{id = Model.Id, page = i} )">@Model.OrderedPeople[i].Item1</a>

								</li>
							}
						</ol>
						<hr />
						<div class="alignCenter" style="padding:5px;padding-top: 14px;"><a class="btn btn-default reviewOthersButton" href="@Url.Action("AdditionalReview", new { id = Model.Id ,page = Model.Page })">Review Others <span class="glyphicon glyphicon-plus gray"></span></a></div>

					</div>
				</div>
			</figure>
		</div>
	</div>
}


@Html.HiddenFor(x => x.StartTime.Ticks)
@if (Model.Page == 0 && Model.Editable && Model.FirstPageHint)
{
	<div class="row">
		<div class="col-md-12">
			<div class="panel panel-default">
				<div class="panel-heading">
					<h3 class="panel-title">Instructions:</h3>
				</div>
				<div class="panel-body">
					<p class="alignCenter"><h4>Please answer all questions as accurately and honestly as possible.</h4></p>
					<p>For each person you review, you're asked to evaluate whether the individual <i>Gets</i>, <i>Wants</i>, and <i>Has the Capacity</i> to perform each of their roles. You may add a comment to your response by clicking '<span class="glyphicon glyphicon-pencil" style="opacity:.7"></span>' icon in the square.</p>
					<p>You're also asked to evaluate whether the individual <i>Almost Always</i>, <i>Sometimes</i>, or <i>Hardly Ever</i> exhibits company values. You may add a comment to your response by clicking "Add Comment" to the right.</p>

				</div>
			</div>
		</div>
	</div>
}

<span class="glyphicon glyphicon-question-sign"
	  style="float: right;margin-top: -17px;opacity: .4; cursor:pointer"
	  onclick="cancelTips($('.cancelTipsButton'));resetHints();runTips();"></span>
<div class="row">
	<div class="col-md-12">
		<div>
			<div class="smallBreak"></div>
			@foreach (var group in Model.Answers.GroupBy(x => x.BaseAnswer.Askable.Category.Id).OrderByDescending(x => x.Key))
			{
				var dict = new ViewDataDictionary();

				var sliders = group.ToList().Where(x => x.BaseAnswer is SliderAnswer).Select(x => x.BaseAnswer).Cast<SliderAnswer>().ToList();
				var thumbs = group.ToList().Where(x => x.BaseAnswer is ThumbsAnswer).Select(x => x.BaseAnswer).Cast<ThumbsAnswer>().ToList();
				var feedbacks = group.ToList().Where(x => x.BaseAnswer is FeedbackAnswer).Select(x => x.BaseAnswer).Cast<FeedbackAnswer>().ToList();
				var gwcs = group.ToList().Where(x => x.BaseAnswer is GetWantCapacityAnswer).Select(x => x.BaseAnswer).Cast<GetWantCapacityAnswer>().ToList();
				var values = group.ToList().Where(x => x.BaseAnswer is CompanyValueAnswer).Select(x => x.BaseAnswer).Cast<CompanyValueAnswer>().ToList();
				var rocks = group.ToList().Where(x => x.BaseAnswer is RockAnswer).Select(x => x.BaseAnswer).Cast<RockAnswer>().ToList();
				//var gwc = group.ToList().Where(x => x is GetWantCapacityAnswer).Cast<GetWantCapacityAnswer>().ToList();


				dict["Max"] = group.Count();

				<div class="panel panel-default">
					<div class="panel-heading">
						<h3 class="panel-title">@group.FirstOrDefault().NotNull(x => x.BaseAnswer.Askable.Category.Category.Translate())</h3>
					</div>
					<div class="panel-body">
						@Html.Partial("Take/GWC", Tuple.Create(gwcs, Model.Editable), dict)
						@Html.Partial("Take/Values", Tuple.Create(values, Model.Editable), dict)
						@Html.Partial("Take/Rocks", Tuple.Create(rocks, Model.Editable), dict)
						@{dict["I"] = 0;}
						@Html.Partial("Slider", Tuple.Create(sliders, Model.Editable), dict)
						@{dict["I"] = sliders.Count();}
						@Html.Partial("Thumbs", Tuple.Create(thumbs, Model.Editable), dict)
						@{dict["I"] = sliders.Count() + thumbs.Count();}
						@Html.Partial("Feedback", Tuple.Create(feedbacks, Model.Editable), dict)
						@*@{dict["I"] = sliders.Count() + thumbs.Count();}
							@Html.Partial("GetWantCap", Tuple.Create(gwc, Model.Editable), dict)*@
					</div>
				</div>
			}
		</div>
	</div>

</div>


@using (Html.BeginScripts())
{
	<script src="~/Scripts/review/review.js"></script>
	<script src="~/Scripts/review/translateSlider.js"></script>
	<script src="~/Scripts/jquery/jquery-simple-slider.js"></script>
	<script>
		var canUpdate = true;

		$(function () {
			$(".sidebar1 img").one("load", fixMinheight);
			fixMinheight();
		});

		function fixMinheight() {
			var h = Math.max($(".front .sidebar").height(), $(".back .sidebar").height()) + 15;
			$(".sidebar1").css("min-height", h);
		}

		function sliderUpdateInternal(self) {
			var d = { value: parseInt($(self).val()) };
			var disp = d.value;
			if (d.value == 0) {
				disp = "NA";
			}

			$("#" + $(self).attr("name") + " .rangevalue").html(disp).addClass("show");

			slideUpdate.call(self, d);
		}

		var tips = [];

		function cancelTips(self) {
			try {
				$(self).parents(".qtip").qtip("hide");
				$(self).parents(".qtip").qtip("disable");
				var item = $(tips[0].selector);
				$(item).removeClass("tip");
				setTimeout(function () { $(item).removeClass("slowFade"); }, 500);
			} catch (e) {
				console.log(e);
			}
		}
		function nextTips(self) {
			var item = $(tips[0].selector);
			$(item).qtip("hide");
			$(item).qtip("disable");
			$(item).removeClass("tip");
			setTimeout(function () { $(item).removeClass("slowFade"); }, 500);
			tips.splice(0, 1);
			runTips();
		}

		function addTip(selector, title, tip) {
			var t = {
				tip: tip,
				heading: title,
				selector: selector
			};
			tips.push(t);
			return t;
		}

		function runTips() {

			if (tips.length > 0) {
				setTimeout(function () {
					var tip = tips[0].tip;
					var heading = tips[0].heading;
					var item = $(tips[0].selector);

					if (item.length == 0) {
						tips.splice(0, 1);
						runTips();
						return;
					}

					var position = tips[0].position || { at: 'center right', my: 'center left' };

					$(item).addClass("currentTip");

					var next = "Next";
					var closeBtn = "<span class='btn btn-default cancelTipsButton' style='margin:2px;' onclick='cancelTips(this)'>Close</span>";
					if (tips.length == 1) {
						next = "Got it!";
						closeBtn = "";
					}

					$(item).addClass("slowFade tip");
					$(item).qtip({
						content: {
							text: "<div>" +
								"<div><h4>" + heading + "</h5></div>" +
								"<div><p style='font-size:13px;'>" + tip + "</p></div>" +
								"<div style='text-align:right'>" +
								closeBtn +
								"<span class='btn btn-default' style='margin:2px;' onclick='nextTips()'>" + next + "</span>" +
								"</div>" +
								"<div>"
						},
						style: {
							classes: 'qtip-green qtip-shadow'
						},
						show: { when: false, ready: true },
						position: position,
						hide: false,
					});
				}, 500);
			}
		}



		function slideUpdate(d) {
			var name = $(this).attr("name");
			/* var answers = ["Never", "Seldom", "Sometimes", "Usually", "Mostly", "Always", "Above and Beyond"];
			 var div = 100 / answers.length;
			 var i = Math.floor(d.value / div);

			 var answer = answers[i];
			 if (d.value == 0)
				 answer = "No Answer";*/

			var disp = d.value;
			if (d.value == 0) {
				disp = "NA";
			}

			var answer = sliderToText(d.value);

			$("#" + $(this).attr("name") + " .rangevalue").html(disp);

			$("#" + name + "_title").html(answer);
			$(this).val();
			$(this).attr("name");
		}

		function resetHints() {
			tips = [];
			addTip($(".table-gwc tr").eq(1).find(".fill").first(), "Evaluating Roles", "You'll need to evaluate how well an individual performs their roles.<br/> Click this box to toggle between Always, Mostly, Rarely and Never.");
			addTip($(".table-gwc tr").eq(1).find(".glyphicon-pencil").first(), "Adding Comments", 'You can optionally add a comment by clicking the pencil.');
			addTip($(".table-values .posneg").first(), "Evaluating Values", "You'll need to evaluate whether an individual exhibits Company Values. Choose between <i>Almost Always</i>, <i>Sometimes</i>, or <i>Hardly Ever</i>.");
			var t = addTip($(".table-values .reason").first(), "Adding Comments", 'You can optionally add a comment by clicking here.');
			t.position = { at: 'top center', my: 'bottom center' };
			t = addTip($("#nameList").first(), "Who are you reviewing?", "The sidebar lists all the people you'll need to review. Red text indicates an incomplete review, while blue indicates that it is complete.");
			t.position = { at: 'center left', my: 'center right' };
			t = addTip($(".reviewOthersButton").last(), "Review more people", "You may optionally add more people to review by clicking 'Review Others'.");
			t.position = { at: 'center left', my: 'center right' };
		}

		$(function () {

			/*
			$(".sliderInput").slider().on('calculate', slideUpdate);//.on('click', slideUpdate).on('slideStop', slideUpdate);

			$(".sliderBar").each(function () {
				sliderUpdateInternal(this);
			});*/
			$(".sliderBar").bind("slider:changed", function (event, data) {
				// The currently selected value of the slider

				slideUpdate.call(this, data);
			});
			$(".sliderBar").each(function (d) {
				slideUpdate.call(this, this);
			});
			$('.btn-group').button();

			resetHints();

			setTimeout(function () {
				$('.flipCard,.nameFade,.flipButton').addClass("flipped");
			}, 1500);

		});



	</script>
	if (ViewBag.NoSubmit == null)
	{
		<script>
			$(function () {
				$(".changeable").change(function () {
					reviewChanges = true;
					console.log("change");
				});

				$(".changeable").on('input propertychange', function () {
					reviewChanges = true;
					console.log("propertychange");
				});

				var onleaving = function () {
					if (reviewChanges) {
						var o;
						$.ajax({
							method: "post",
							data: $("#form").serialize(),
							url: "/Review/Save/",
							async: false,
							success: function (data) {
								//nothin.
							},
							error: function (a, b, c) {
								o = 'Are you sure you want to leave this page? Without clicking Back or Next, your changes will be lost.';
							}
						});
						return o;
					}
				};

				$(document).ready(function () {
					$('.submitButton').on('mousedown', stopNavigate);
					$('.submitButton').on('mouseleave', function () {
						$(window).on('beforeunload', onleaving);
					});
				});

				$(window).on('beforeunload', onleaving);


				function stopNavigate() {
					$(window).off('beforeunload');
				}
			});


		</script>
	}

	if (Model.Page == 0 && Model.Editable && Model.FirstPageHint)
	{
		<script>
			$(function () {
				runTips();
			});
		</script>
	}

}

@using (Html.BeginStyles())
{
	<link href="~/Content/simple-slider.css" rel="stylesheet" />
	<link href="~/Content/Review.css" rel="stylesheet" />
	<style>
		.complete a {
			/*color: #52AC52 !important;*/
		}

		.incomplete a {
			color: #D68585 !important;
		}

		textarea {
			border: 1px solid #A9A9A9;
		}

		.slowFade {
			-moz-transition: opacity .2s ease;
			-o-transition: opacity .2s ease;
			-webkit-transition: opacity .2s ease;
			transition: opacity .2s ease;
		}

		.tip.fill {
			 background-color: #413452 !important;
		}

		.tip.posneg,textarea.tip,.reviewOthersButton.tip {
			border: 1px solid #413452 !important;
			box-shadow: 0 0 8px 2px #413452;
		}

		.tip.glyphicon {
			opacity: 1;
			color: #413452;
		}
		@@-webkit-keyframes thumb {
			0% { -webkit-transform: translateX(0px); }
			25% { -webkit-transform: translateX(-5px); }
			50% { -webkit-transform: translateX(0px); }
			75% { -webkit-transform: translateX(5px); }
			100% { -webkit-transform: translateX(0px); }
		}

		#nameList.tip li a{
			-webkit-animation-name: thumb;
			-webkit-animation-duration: 500ms;
			-webkit-transform-origin:50% 50%;
			-webkit-animation-iteration-count: 3;
			-webkit-animation-timing-function: ease;
		}
	</style>
}
