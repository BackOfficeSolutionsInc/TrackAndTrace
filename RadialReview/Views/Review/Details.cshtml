@model RadialReview.Controllers.ReviewController.ReviewDetailsViewModel
@using RadialReview.Models;
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Page = Model.Review.ForUser.GetName();
    ViewBag.ExtraTabs = ExtraTab.Create(
        "Review: " + Model.Review.Name, "/Reports/List/" + Model.Review.ForReviewsId,
        ViewBag.Page, "/Review/Details/" + Model.Review.Id
        );

    var pluralized = Model.Review.ForUser.GetName().Trim();
    if (pluralized.ToLower().EndsWith("s"))
    {
        pluralized += "'";
    }
    else
    {
        pluralized += "'s";
    }

    var heading = "Create " + pluralized + " report for '" + Model.Review.Name + "'";
}

@section top{
    <div class="aboveJumbotron"><h2>@heading</h2></div>
    <div class="jumbotron authorized @(Model.Review.ClientReview.Visible?"on":"")">
        <h1>Report</h1>
    </div>
}

@section header{
    @Html.Partial("_ReportsHeader")
}
<a href="top"></a>
<div class="row">
    <div class="col-md-3 ">
        <div class="row">
            <div class="col-sm-6 col-md-12 ">
                <div class="" style="padding-top:5px;font-size:12px">
                    @Html.Partial("_User", Model.Review.ForUser)
                </div>
                <div class="smallBreak2"></div>
            </div>
            <div class="col-sm-6 col-md-12 ">
                <div class="sidebar noPad">
                    <div class="sidebar-header" style="padding-left: 20px;">
                        <div class="row alignCenter">
                            <div class="col-lg-5" style="padding-top: 5px;">
                                <span> <div style="font-size:18px">Share with Employee</div></span>
                            </div>
                            <div class="col-lg-7 noPad">
                                <input id="Authorize"
                                       type="checkbox" @(Model.Review.ClientReview.Visible ? "checked" : "")
                                       class="switch switch-large fullWidth"
                                       style="min-width:128px;"
                                       data-on-color="success"
                                       data-off-color="danger"
                                       data-on-text="Sharing"
                                       data-off-text="Private"
                                       data-size="large"
                                       data-label-icon="glyphicon glyphicon-chevron-right lightGrayOutlined" />
                            </div>
                        </div>
                    </div>
                    <div class="sidebar-contents">
                        @{
                            var visible = Model.Review.ClientReview.Visible;
                        }
                        <div class="smallBreak"></div>
                        @*Charts*@
                        <h4 class="alignCenter">Charts</h4>
                        <table id="charts" style="vertical-align: top;font-size:80%;width:100%;">
                            @foreach (var chart in Model.Review.ClientReview.Charts.ToListAlive())
                            {
                                <tr class="chart_@chart.Id">
                                    <td>@chart.Title</td>
                                    <td>
                                        <span onclick="RemoveChart(@chart.Id)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span>
                                    </td>
                                </tr>

                            }
                        </table>
                        <hr />
                        @*Feedback*@
                        <h4 class="alignCenter">Feedback</h4>
                        <ul class="noBullet" id="feedbacks">
                            @*&& Model.Review.ClientReview.FeedbackIds.ToListAlive().Any(y => y.Value == x.Id)).Cast<FeedbackAnswer>())*@
                            @foreach (var feedback in Model.AnswersAbout.Where(x => x is FeedbackAnswer && x.Complete).Cast<FeedbackAnswer>())
                            {
                                var on = Model.Review.ClientReview.FeedbackIds.ToListAlive().FirstOrDefault(x => x.Value == feedback.Id) != null;
                                            
                                <li class="feedback feedback_@feedback.Id">
                                    @*<input name="feedback_input_@feedback.Id" onchange="SetFeedback(@feedback.Id)">*@
                                <span title="@feedback.Feedback">@feedback.ByUser.GetName()</span>


                                <input class="pull-right feedback_input_@feedback.Id" type="checkbox" @(on?"checked":"") onchange="OnclickFeedback(this,@feedback.Id)" />
                                @*<span onclick="SetFeedback(@feedback.Id,false)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span>*@
                            </li>
                            }
                        </ul>
                        <hr />
                        @*Include*@
                        <h4 class="alignCenter">Include</h4>
                        <ul class="noBullet" id="includes">
                            <li class="clearfix">
                                <a href="#SelfAnswers">@Model.Review.ForUser.GetName()'s Answers</a>
                                <div onclick="SetSelfAnswers()"
                                     class="SelfAnswers glyphicon includable pull-right clickable @(Model.Review.ClientReview.IncludeSelfFeedback ? "on" : "")">
                                </div>
                            </li>
                            <li class="clearfix">
                                <a href="#ManagerAnswers">Managers' Answers</a>
                                <div onclick="SetManagerAnswers()"
                                     class="ManagerAnswers glyphicon includable pull-right clickable @(Model.Review.ClientReview.IncludeManagerFeedback?"on":"")">
                                </div>
                            </li>
                            <li class="clearfix">
                                <a href="#AggregateAnswers">Aggregate Answers</a>
                                <span onclick="SetQuestionTable()"
                                      class="QuestionTable glyphicon includable pull-right clickable @(Model.Review.ClientReview.IncludeQuestionTable?"on":"")">
                                </span>
                            </li>
                        </ul>
                        <hr />
                        <h4 class="alignCenter">Notes</h4>
                        <div class="save">Saving</div>
                        @Html.TextAreaFor(x => x.Review.ClientReview.ManagerNotes, new { placeholder = "Optional notes...", style = "width:100%;height:150px;resize:vertical;border: 1px solid #DBDBDB;", id = "ManagerNotes" })
                        <hr />
                        <div class="alignCenter">
                            <div onclick="clickDetails()" class="btn btn-default" style="width:120px;">View/Print</div>
                            <div class="smallBreak"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="smallBreak2"></div>
    </div>
    <div class="col-md-9">
        <div class="" style=" min-width: 650px;padding-top:5px;">
            @*
                <div class="header" style="height:60px;">
                    <div class="pull-left" style="font-size: 30px;">
                        Manage Review for @Model.Review.ForUser.GetName()
                    </div>
                    <a class="btn btn-default pull-right" href="@Url.Action("List", "Reports", new {id=Model.Review.ForReviewsId })">
                        Back
                    </a>
                </div>*@
            <div class="row clearfix">
                <div class="col-md-12 ">
                    <div class="alignRight" style="position: absolute;right: 20px;top: -16px;">
                        @if (Model.Review.ClientReview.SignedTime == null)
                        {

                            <span class="unsigned">Unsigned</span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-ok strokeGreen green"></span>
                            @:Signed @Model.Review.ClientReview.SignedTime.Value.ToShortDateString()!
                        }
                    </div>
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseChartBuilder">
                                <h3 class="panel-title">Chart Builder</h3>
                            </a>
                        </div>
                        <div id="collapseChartBuilder" class="panel-collapse collapse in remember">
                            <div class="noselect">
                                <form id="controls">
                                    <div class="row" style="padding-top:5px">
                                        <div class="col-xs-4">
                                            <b style="padding-left: 28px;">Axis:</b>
                                            <div style="height: 75px; margin-top: 3px; clear: both; width: 100%; padding-left: 10px;">
                                                @*<li>X<select id="xAxis" class="form-control inlineBlock" style=""></select></li>
                                                    <li>Y<select id="yAxis" class="form-control inlineBlock"></select></li>*@
                                                <table class="fullWidth">
                                                    <tr>
                                                        <td><b>X</b></td>
                                                        <td><select id="xAxis" class="form-control inlineBlock"></select></td>
                                                    </tr>
                                                    <tr>
                                                        <td><b>Y</b></td>
                                                        <td><select id="yAxis" class="form-control inlineBlock"></select></td>
                                                    </tr>
                                                </table>
                                            </div>
                                            @*<table class="pull-right">
                                                    <tr>
                                                        <td><h4 class="axisTitle ">X</h4></td>
                                                        <td><select id="xAxis" class="form-control inlineBlock"></select></td>
                                                    </tr>
                                                    <tr>
                                                        <td><h4 class="axisTitle ">Y</h4></td>
                                                        <td><select id="yAxis" class="form-control inlineBlock"></select></td>
                                                    </tr>
                                                </table>*@
                                        </div>
                                        <div class="col-xs-2 noPad">
                                            <b>Separate by:</b>
                                            <div style="overflow-y: auto; overflow-x: hidden; height: 90px; border: 1px solid #CACACA; padding-left: 5px;">
                                                <ul class="noBullet separation" id="groupSet">
                                                    <li>
                                                        <input name="separate" id="separateUsers" class="update group remember" type="radio" data-class="user-*" value="user-*" />
                                                        <label for="separateUsers">Users</label>
                                                    </li>
                                                    <li>
                                                        <input name="separate" id="separateRelationship" class="update group remember" type="radio" data-class="about-*" value="about-*" />
                                                        <label for="separateRelationship">Relationship</label>
                                                    </li>
                                                    <li>
                                                        <input checked name="separate" id="separateReview" class="update group remember" type="radio" data-class value />
                                                        <label for="separateReview">Review</label>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="col-xs-4 noPad">
                                            <b>Filter By:</b>
                                            <div id="filtersContainer" class="hidden" style="overflow-y: auto; overflow-x: hidden; height: 90px; border: 1px solid #CACACA; padding-left: 5px;">
                                                <ul id="filterSet" class="noBullet separation" style="/*zoom: 67%;*/"></ul>
                                            </div>
                                        </div>
                                        <div class="col-xs-2 noPad alignCenter">
                                            <div class="btn btn-default" onclick="IncludeChart()">Add Chart</div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="row noselect">
                                <div class="col-md-12">
                                    <div class="alignCenter">
                                        <div class="" style="width: calc( 100% - 145px ); float: left; padding-left: 13px;">
                                            <div id="chart" class="inline ">
                                                <!--Chart Goes Here-->
                                            </div>
                                        </div>
                                        <div style="width: 136px; float: right;">
                                            <div id="legend" class="legend inline">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row" style="clear: both;padding-top: 10px;">
                                    <div class="col-xs-3">
                                        <div id="StartDate" class="bordered alignCenter">--</div>
                                    </div>
                                    <div class="col-xs-6">
                                        <div id="DateSlider"></div>
                                    </div>
                                    <div class="col-xs-3">
                                        <div id="EndDate" class="bordered alignCenter">--</div>
                                    </div>
                                </div>
                                <br />
                            </div>
                            <div class="row alignCenter" style="font-size:80%;">
                                <div class="col-xs-3"></div>
                                <div class="col-xs-3"><div class="clickable" onclick="collapseAll();">(Hide All)</div></div>
                                <div class="col-xs-3"><div class="clickable" onclick="expandAll();">(Show All)</div></div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-primary">
                        <div class="panel-heading panel-square">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseFeedback">
                                <h3 class="panel-title">Feedback</h3>
                            </a>
                        </div>
                        <div id="collapseFeedback" class="panel-collapse collapse in remember">
                            @{
                                var feedbacks = Model.AnswersAbout.Where(x => x is FeedbackAnswer && x.Complete).Cast<FeedbackAnswer>();
                            }

                            @if (feedbacks.Count() > 0)
                            {
                                <table class="fullWidth">
                                    <tr>
                                        <th></th>
                                        <th style="width:120px">By</th>
                                        <th>Feedback</th>
                                        <th class="rightButton alignCenter">Included</th>
                                    </tr>
                                    @foreach (var feedback in feedbacks)
                                    {
                                        <tr class="feedback feedback_@feedback.Id" style="border-bottom: 1px solid #DDD">
                                            <td></td>
                                            <td>@feedback.ByUser.GetName()</td>
                                            <td class="text">@feedback.Feedback</td>
                                            <td class="alignCenter clickable">
                                                @{
                                                var on = Model.Review.ClientReview.FeedbackIds.ToListAlive().FirstOrDefault(x => x.Value == feedback.Id) != null;
                                                }
                                                <input @(on ? "checked" : "") class="feedback_input_@feedback.Id" type="checkbox" onchange="OnclickFeedback(this,@feedback.Id)" />


                                                @*<div onclick="SetFeedback(@feedback.Id)" class="check  @(on?"on":"")">    </div>*@
                                            </td>
                                        </tr>
                                    }
                                </table>
                            }
                            else
                            {
                                <div class="panel-body gray">
                                    No feedback has been supplied.
                                </div>
                            }
                        </div>
                    </div>
                    @*Self Answers*@
                    <a id="SelfAnswers" class="shiftByTitle"></a>
                    <div class="panel panel-primary">
                        <div onclick="SetSelfAnswers()"
                             class="SelfAnswers includable @(Model.Review.ClientReview.IncludeSelfFeedback?"on":"")"
                             style="">
                            <div class="text"></div>
                            <div class="light-icon"></div>
                        </div>
                        <div class="panel-heading  panel-square">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseSelfAnswers">
                                <h3 class="panel-title">@Model.Review.ForUser.GetName()'s Answers</h3>
                            </a>
                        </div>
                        <div id="collapseSelfAnswers" class="panel-collapse collapse in remember">
                            @Html.Partial("~/Views/Partial/_SupervisorAnswers.cshtml", Tuple.Create(Model.Review.ForUser.AsList(), Model.AnswersAbout))
                        </div>
                    </div>
                    @*Manager Answers*@
                    <a id="ManagerAnswers" class="shiftByTitle"></a>
                    <div class="panel panel-primary">
                        @*<div onclick="SetManagerAnswers()" class="ManagerAnswers btn btn-default pull-right headerButton includable @(Model.Review.ClientReview.IncludeManagerFeedback?"on":"")" style=""></div>*@
                        <div onclick="SetManagerAnswers()"
                             class="ManagerAnswers includable @(Model.Review.ClientReview.IncludeManagerFeedback ? "on" : "")"
                             style="">
                            <div class="text"></div>
                            <div class="light-icon"></div>
                        </div>

                        <div class="panel-heading panel-square">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseManagerAnswers">
                                <h3 class="panel-title">Manager Answers</h3>
                            </a>
                        </div>
                        <div id="collapseManagerAnswers" class="panel-collapse collapse in remember">
                            @Html.Partial("~/Views/Partial/_SupervisorAnswers.cshtml", Tuple.Create(Model.Supervisers, Model.AnswersAbout))
                        </div>
                    </div>
                    @*All Answers*@
                    <a id="AggregateAnswers" class="shiftByTitle"></a>
                    <div class="panel panel-primary">
                        @*<div onclick="SetQuestionTable()" class="QuestionTable btn btn-default pull-right headerButton includable @(Model.Review.ClientReview.IncludeQuestionTable?"on":"")" style=""></div>*@

                        <div onclick="SetQuestionTable()"
                             class="QuestionTable includable @(Model.Review.ClientReview.IncludeQuestionTable ? "on" : "")"
                             style="">
                            <div class="text"></div>
                            <div class="light-icon"></div>
                        </div>
                        <div class="panel-heading panel-square">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseAllAnswers">
                                <h3 class="panel-title">Aggregate Answers</h3>
                            </a>
                        </div>
                        <div id="collapseAllAnswers" class="panel-collapse collapse in remember">
                            @Html.Partial("~/Views/Partial/_QuestionColorTable.cshtml", Model.AnswersAbout)
                        </div>
                    </div>
                    @*All other answers*@
                    <a id="OtherAnswers" class="shiftByTitle"></a>
                    <div class="panel panel-primary">
                        <div class="panel-heading panel-square">
                            <div class="collapseIcon"></div>
                            <a class="collapseHeading" data-toggle="collapse" data-parent="#accordion" href="#collapseAllOtherAnswers">
                                <h3 class="panel-title">All Answers</h3>
                            </a>
                        </div>
                        <div id="collapseAllOtherAnswers" class="panel-collapse collapse in remember">
                            @{
                                var allOtherUsers = Model.AnswersAbout
                                    .GroupBy(x => x.ByUserId)
                                    .Select(x => x.First().ByUser)
                                    .ToList();
                            }
                            @Html.Partial("~/Views/Partial/_AnswerTable.cshtml", Tuple.Create(allOtherUsers, Model.AnswersAbout.Where(x => x is SliderAnswer).Cast<SliderAnswer>().ToList()))
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="smallBreak"></div>
    </div>
</div>
@using (Html.BeginScripts())
{
    <script src="~/Scripts/jquery/jquery.nouislider.js"></script>
    <script src="/scripts/d3/d3.js"></script>
    <script src="/scripts/d3/d3.csv.js"></script>
    <script src="~/Scripts/bootstrap-switch.js"></script>
    <script src="~/Scripts/review/translateSlider.js"></script>
    <script src="~/Scripts/jquery/jquery.ba-throttle-debounce.js"></script>
    <script src="~/Scripts/d3/Plot.js"></script>
    <script src="~/Scripts/moment.min.js"></script>
    <script>
        var last = null;

        function removeEmpty(array, deleteValue) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] == deleteValue) {
                    array.splice(i, 1);
                    i--;
                }
            }
            return array;
        };

        function collapseAll() {
            $('.panel-collapse').collapse('hide');
        }
        function expandAll() {
            $('.panel-collapse').collapse('show');
        }

        function Group() {
        }

        function saveText() {
            var notes = $("#ManagerNotes").val();
            var dat = new Object();
            dat.id = "@Model.Review.Id";
            dat.notes = notes;
            if (notes != last) {
                last = notes;
                $(".save").addClass("saving");
                $.ajax({
                    url: "/Review/SetNotes",
                    data: dat,
                    method: "POST",
                    complete: function () {
                        setTimeout(function () {
                            $(".save").removeClass("saving");
                        }, 1000);
                    }
                });
            }
        }

        function clickDetails() {
            if (allowed() || confirm("You need to include data in the review. Add some feedback and charts before viewing. You may turn off this indicator by turning off hints. Continue anyway?")) {
                window.location = "/Review/ClientDetails/@Model.Review.Id?reviewing=true";
            }

        }

        function clickAuthorize() {
            if (allowed() || $("#Authorized").hasClass("on") || confirm("You need to include data in the review. You should add some feedback and charts before authorizing. You may turn off this indicator by turning off hints. Continue anyway?")) {
                setAuthorize();
            } else {
                ;
            }
        }

        function SetManagerAnswers() {
            var on = !$(".ManagerAnswers").hasClass("on");
            var dat = { reviewId: "@Model.Review.Id", on: on };
            $.ajax({
                url: "/Review/SetIncludeManagerAnswers",
                data: dat,
                method: "GET",
                success: function (data) {
                    if (data.Object) {
                        if (data.Object.On) {
                            $(".ManagerAnswers").addClass("on");
                        } else {
                            $(".ManagerAnswers").removeClass("on");
                        }
                    }
                }
            });
        }

        function SetSelfAnswers() {
            var on = !$(".SelfAnswers").hasClass("on");
            var dat = { reviewId: "@Model.Review.Id", on: on };
            $.ajax({
                url: "/Review/SetIncludeSelfAnswers",
                data: dat,
                method: "GET",
                success: function (data) {
                    if (data.Object) {
                        if (data.Object.On) {
                            $(".SelfAnswers").addClass("on");
                        } else {
                            $(".SelfAnswers").removeClass("on");
                        }
                    }
                }
            });
        }

        function SetQuestionTable() {
            var on = !$(".QuestionTable").hasClass("on");
            var dat = { reviewId: "@Model.Review.Id", on: on };
            $.ajax({
                url: "/Review/SetIncludeTable",
                data: dat,
                method: "GET",
                success: function (data) {
                    if (data.Object) {
                        if (data.Object.On) {
                            $(".QuestionTable").addClass("on");
                        } else {
                            $(".QuestionTable").removeClass("on");
                        }
                    }
                }
            });
        }

        function OnclickFeedback(self,id) {
            SetFeedback(id, $(self).is(':checked'));
        }

        function SetFeedback(id, on) {
            var dat = new Object();
            dat.feedbackId = id;
            dat.reviewId = "@Model.Review.Id";
            /*if (on === undefined) {
                on = !$(".feedback_" + id + " .check").hasClass("on");
            }*/
            dat.on = on;

            $(".feedback_input_" + id /*+ " .check"*/).prop("disabled", true);

            $.ajax({
                url: "/Review/SetFeedback",
                data: dat,
                method: "GET",
                success: function (data) {
                    if (data.Object) {
                        if (on != data.Object.On) {
                            showAlert("An error occurred.");
                            location.href = "#top";
                        }
                        $(".feedback_input_" + data.Object.FeedbackId /*+ " .check"*/).prop("checked", data.Object.On);
                        //if (data.Object.On) {
                        //    $(".feedback_" + data.Object.FeedbackId + " .check").addClass("on");
                        //    var text = $(".feedback_" + data.Object.FeedbackId + " .text").html();
                        //    var toAppend = '<li class="feedback feedback_' + data.Object.FeedbackId + '">' + text + '<span onclick="SetFeedback(' + data.Object.FeedbackId + ',false)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span></li>';
                        //    $("#feedbacks").append(toAppend);
                        //} else {
                        //    $(".feedback_" + data.Object.FeedbackId + " .check").removeClass("on");
                        //    $("#feedbacks .feedback_" + data.Object.FeedbackId).remove();
                        //}
                    }
                },
                complete: function () {
                    UpdateFeedbacks();
                    $(".feedback_input_" +id /*+ " .check"*/).prop("disabled", false);
                }
            })
        }

        function UpdateFeedbacks() {
            $(".feedback .check").each(function (i, e) {
                if ($(e).hasClass("on"))
                    $(e).html('<span title="Included" class="glyphicon glyphicon glyphicon-ok   green strokeGreen"></span>');
                else
                    $(e).html('<span title="Excluded" class="glyphicon glyphicon-ban-circle     red strokeRed"></span>');
            });
        }

        function allowed() {
            @if(!((bool?)ViewBag.Hints ?? true))
            {
                @:return true;
                                                                                                                                                                                                }

            return ($("#charts tr").size() != 0 || $("#feedbacks li").size() != 0 || $("#includes li .includable.on").size() != 0);
        }

        function setAuthorize(auth) {
            var dat = new Object();
            dat.Authorized = auth;
            dat.ReviewId = "@Model.Review.Id";

            $.ajax({
                url: "/Review/Authorize",
                data: dat,
                method: "GET",
                success: function (data) {
                    showJsonAlert(data, false);
                    if (data.Object.Authorized) {
                        $("#Authorize").prop('checked', true);
                        $(".authorized").addClass("on");
                    } else {
                        $("#Authorize").prop('checked', false);
                        $(".authorized").removeClass("on");
                    }
                }
            });
        }

        $(function () {
            UpdateFeedbacks();
        });

        function IncludeChart() {
            var xId = $("#xAxis").val().substring(9);
            var yId = $("#yAxis").val().substring(9);

            var groups = $("#groupSet input:checked").map(function () { return $(this).val(); });
            var filters = $("#filterSet input:checked").map(function () { return $(this).data("class"); });
            var groupStr, filterStr;

            if (groups.length == 0)
                groupStr = "";
            else
                groupStr = groups.get().join();
            if (filters.length == 0)
                filterStr = "";
            else
                filterStr = filters.get().join();


            var dat = new Object();
            dat.X = xId;
            dat.Y = yId;
            dat.groups = groupStr;
            dat.filters = filterStr;
            dat.ReviewId = "@Model.Review.Id";
            dat.Start = $("#DateSlider").val()[0];
            dat.End = $("#DateSlider").val()[1];
            // var joined = removeEmpty([groupStr, filterStr],"").join(";");

            $.ajax({
                url: "/Review/AddChart",
                data: dat,
                method: "GET",
                success: function (data) {

                    var joined = data.Object.Title;

                    /*if (joined.trim() != "")
                        joined = "(" + joined + ")";*/
                    var toAppend = '<tr class="chart_' + data.Object.ChartId + '"><td>' + data.Object.Title + '</td><td><span onclick="RemoveChart(' + data.Object.ChartId + ')" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span></td></tr>';
                    $("#charts").append(toAppend);
                }
            });
        }

        function RemoveChart(chartId) {
            var dat = new Object();
            dat.chartId = chartId;
            dat.reviewId = "@Model.Review.Id";
            $.ajax({
                url: "/Review/RemoveChart",
                data: dat,
                method: "GET",
                success: function (data) {
                    $(".chart_" + data.Object.ChartId).remove();
                }
            })
        }

        var slider;
        $(function () {
            $('.switch').bootstrapSwitch();
            $('#Authorize').on('switchChange', function (e, data) {
                setAuthorize(data.value);
            });
            $('#ManagerNotes').keyup($.debounce(500, saveText));
            slider = $("#DateSlider").noUiSlider({
                range: [0, 1],
                start: [0, 0],
                handles: 2,
                step: 10,
                margin: 20,
                connect: true,
                direction: 'ltr',
                orientation: 'horizontal',
                behaviour: 'tap-drag',
                serialization: {
                    resolution: 1,
                    to: [function (v) {
                        $("#StartDate").html(moment(+v).format("MMMM Do YYYY"));
                    }, function (v) {
                        $("#EndDate").html(moment(+v).format("MMMM Do YYYY"));
                    }]
                }
            });
        });

        function legend(legendData, chart) {
            if (legendData.length > 0) {
                $("#legend").html("<div class='container'><div class='title'>Legend:</div><div class='contents'></div></div>");

                for (var i in legendData) {
                    var item = legendData[i];
                    $("#legend .contents").append("<div><div class='" + item.Class + " circle inlineBlock'></div><div class='inlineBlock'>" + item.Name + "</div></div>")
                }
            }
        }

        var chart = new ScatterChart("chart");

        function update(reset) {
            var date1 = new Date(+$("#DateSlider").val()[0]);
            var date2 = new Date(+$("#DateSlider").val()[1]);
            var date3 = new Date();

            var groups = [];
            var filters = [];

            $(".group:checked").each(function (x) {
                var split = $(this).data("class").split(" ");
                for (var i in split) {
                    groups.push(split[i]);
                }
            });

            $(".filters:checked").each(function (x) {
                var split = $(this).data("class");//.split(" ");
                filters.push(split);/*
                    for (var i in split) {
                        filters.push(split[i]);
                    }*/
            });
            //var groups = [$(".group:checked").map(function () { return  })];
            chart.Plot(AllScatterData, {
                //mouseout: mouseout,
                //mouseover: mouseover,
                animate: true,
                reset: reset,
                xAxis: $("#xAxis option:selected").text(),
                yAxis: $("#yAxis option:selected").text(),
                xDimensionId: $("#xAxis").val(),
                yDimensionId: $("#yAxis").val(),
                startTime: Math.min(date1, date2),//new Date(parseInt($("#slider").val())),
                endTime: Math.max(date1, date2),//new Date(parseInt($("#date").val()))
                time: date3,//new Date(parseInt($("#date").val()))
                groups: [groups],
                filters: filters,
                legendFunc: legend
            });
        }

        var dataUrl = "/Data/ReviewScatter/@Model.Review.ForUserId?reviewsId=@Model.Review.ForReviewsId";
        chart.Pull(dataUrl, null, function (dat) {
            AllScatterData = dat;
            for (var key in dat.Dimensions) {
                var item = dat.Dimensions[key];
                $("#xAxis").append("<option value=\"" + item.Id + "\">" + item.Name + "</option>")
                $("#yAxis").append("<option value=\"" + item.Id + "\">" + item.Name + "</option>")
            }

            $("#xAxis").val(dat.InitialXDimension);
            $("#yAxis").val(dat.InitialYDimension);

            for (var i = 0; i < dat.Filters.length; i++) {
                var filter = dat.Filters[i];
                var checked = "";
                if (filter.On)
                    checked = "checked";
                $("#filterSet").append("<li><input class='filters update' type='checkbox' " + checked + " data-class='" + filter.Class + "'/><label>" + filter.Name + "</label></li>");
            }

            if (dat.Filters.length > 0) {
                $("#filtersContainer").removeClass("hidden");
            }



            $(".update").change(false, function (d) {
                update(d.data);
            });

            //$(".date").attr("min",);
            //$(".date").attr("max", );

            /*$("#date1").change(function () { update(false); });
            $("#date2").change(function () { update(false); });
            $("#date3").change(function () { update(false); });*/
            $("#xAxis").change(function () { update(false); });
            $("#yAxis").change(function () { update(false); });
            slider.noUiSlider({
                range: [this.GetDate(AllScatterData.MinDate).getTime() - 86400000, this.GetDate(AllScatterData.MaxDate).getTime() + 86400000],
                start: [this.GetDate(AllScatterData.MinDate).getTime() - 86400000, this.GetDate(AllScatterData.MaxDate).getTime() + 86400000],
                slide: function () { update(false); }
            }, true);
            slider.change(function () { update(false); });

            update(true);
        });

        document.getElementById("controls").addEventListener("click", chart.update, false);
        document.getElementById("controls").addEventListener("keyup", chart.update, false);
        document.getElementById("xAxis").addEventListener("change", chart.update, false);
        document.getElementById("yAxis").addEventListener("change", chart.update, false);
        //document.getElementById("grouped").addEventListener("change", chart.update, false);
    </script>
}

@using (Html.BeginStyles())
{
    <link href="~/Content/jquery.nouislider.css" rel="stylesheet" />
    <link href="~/Content/Chart/Chart.css" rel="stylesheet" />
    <link href="~/Content/toggle.css" rel="stylesheet" />
    <link href="~/Content/bootstrap-switch.css" rel="stylesheet" />
    <style>
        .jumbotron.authorized {
            background-color: rgba(255, 60, 60, 0.14);
            -moz-transition: background-color .2s ease-in-out;
            -o-transition: background-color .2s ease-in-out;
            -webkit-transition: background-color .2s ease-in-out;
            transition: background-color .2s ease-in-out;
        }

            .jumbotron.authorized.on {
                background-color: rgba(60, 255, 99, 0.14);
            }


        .panel {
            margin-bottom: 0px;
        }

        .collapseHeading {
            color: white;
        }

            .collapseHeading:hover {
                color: white;
            }

        .unsigned {
            cursor: default;
            color: #EEC8C8;
            -moz-transition: color 0.3s ease;
            -o-transition: color 0.3s ease;
            -webkit-transition: color 0.3s ease;
            transition: color 0.3s ease;
        }

            .unsigned:hover {
                color: #F55F5F;
            }

        .includable {
            float: right;
            width: 70px;
            margin-top: 9px;
            margin-right: 14px;
            cursor: pointer;
        }

            .includable:hover .text {
                visibility: inherit;
                color: #B8B8B8;
            }

            .includable:hover .light-icon {
                opacity: 1;
            }

            .includable .light-icon {
                opacity: .4;
                width: 12px;
                height: 12px;
                float: right;
                margin-top: 4px;
                background-image: url("/Content/img/redlight.png");
                -moz-transition: opacity .2s ease-in-out;
                -o-transition: opacity .2s ease-in-out;
                -webkit-transition: opacity .2s ease-in-out;
                transition: opacity .2s ease-in-out;
            }

            .includable.on .light-icon {
                background-image: url("/Content/img/greenlight.png");
            }

            .includable .text {
                float: left;
                visibility: hidden;
            }

            .includable:not(.on) .text:before {
                content: "Excluded";
            }

            .includable.on .text:before {
                content: "Included";
            }

        .legend {
            position: absolute;
            right: 0px;
            padding-right: 25px;
        }

            .legend .container {
                margin-top: 30px;
                border: 1px solid #E7E7E7;
                padding: 10px;
                -webkit-print-color-adjust: exact;
                text-align: left;
            }

            .legend .title {
                font-size: 16px;
            }

            .legend .circle {
                border: 1px solid black;
                border-radius: 6px;
                width: 12px;
                height: 12px;
                display: inline-block;
                margin-right: 5px;
            }
        /*
        .btn.includable {
            opacity: .45;
            -moz-transition: opacity 200ms ease;
            -o-transition: opacity 200ms ease;
            -webkit-transition: opacity 200ms ease;
            transition: opacity 200ms ease;
        }

            .btn.includable:hover {
                opacity: 1;
            }


            .btn.includable.on {
                color: #FFF;
                background-color: #5CB85C;
                border-color: #4CAE4C;
            }

            .btn.includable:not(.on) {
                color: #FFF;
                background-color: #D9534F;
                border-color: #D43F3A;
            }*/
        .chartButton; {
            top: 39px;
            position: absolute;
            right: 39px;
        }

        .save {
            position: absolute;
            right: 26px;
            display: inline-block;
            border: 1px solid #AFADAD;
            padding: 3px;
            border-bottom-left-radius: 3px;
            background-color: #D1FCD1;
            opacity: 0;
            -webkit-transition: all .10s ease;
            -moz-transition: all .10s ease;
            -ms-transition: all .10s ease;
            -o-transition: all .10s ease;
            transition: all .10s ease;
        }

        .saving {
            opacity: .5;
        }

        .has-switch {
        }

        #chart {
            /*width: 650px;*/
            height: 650px;
            position: relative;
            margin: auto;
        }

        .separation label {
            font-weight: normal;
            margin-bottom: 0px;
        }

        #charts:empty:after {
            content: "No charts";
            color: #aaa;
        }

        #feedbacks:empty:after {
            content: "No feedback";
            color: #aaa;
        }
    </style>
}
