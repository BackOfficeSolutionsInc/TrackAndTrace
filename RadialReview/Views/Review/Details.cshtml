@model RadialReview.Controllers.ReviewController.ReviewDetailsViewModel
@using RadialReview.Models;
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginScripts())
{
    <script>
        var last = null;

        function saveText() {
            var notes = $("#ManagerNotes").val();

            var dat = new Object();
            dat.id = "@Model.Review.Id";
            dat.notes = notes;


            if (notes != last) {
                last = notes;
                $(".save").addClass("saving");
                $.ajax({
                    url: "/Review/SetNotes",
                    data: dat,
                    method: "POST",
                    complete: function () {
                        setTimeout(function () {
                            $(".save").removeClass("saving");
                        }, 1000);
                    }
                });
            }
        }

        function allowed() {
            return ($("#charts li").size() != 0 || $("#feedbacks li").size() != 0);
        }

        function clickDetails() {
            if (allowed() || confirm("You need to include data in the review. Add some feedback and charts before viewing. Continue anyway?")) {
                window.location = "/Review/ClientDetails/@Model.Review.Id";
            }

        }
        function clickAuthorize() {
            if (allowed() ||  $("#Authorized").hasClass("on") || confirm("You need to include data in the review. You should add some feedback and charts before authroizing. Continue anyway?")) {
                setAuthorize();
            } else {
                ;
            }

        }

        function SetFeedback(id, on) {
            var dat = new Object();
            dat.feedbackId = id;
            dat.reviewId = "@Model.Review.Id";
            if (on === undefined) {
                on = !$(".feedback_" + id + " .check").hasClass("on");
            }
            dat.on = on;

            $.ajax({
                url: "/Review/SetFeedback",
                data: dat,
                method: "GET",
                success: function (data) {
                    if (data.Object) {
                        if (data.Object.On) {
                            $(".feedback_" + data.Object.FeedbackId + " .check").addClass("on");
                            var text = $(".feedback_" + data.Object.FeedbackId + " .text").html();
                            var toAppend = '<li class="feedback feedback_' + data.Object.FeedbackId + '">' + text + '<span onclick="SetFeedback(' + data.Object.FeedbackId + ',false)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span></li>';
                            $("#feedbacks").append(toAppend);
                        } else {
                            $(".feedback_" + data.Object.FeedbackId + " .check").removeClass("on");
                            $("#feedbacks .feedback_" + data.Object.FeedbackId).remove();
                        }
                    }
                },
                complete: function () {
                    UpdateFeedbacks();
                }
            })
        }

        function UpdateFeedbacks() {
            $(".feedback .check").each(function (i, e) {
                if ($(e).hasClass("on"))
                    $(e).html('<span title="Included" class="glyphicon glyphicon glyphicon-ok   green strokeGreen"></span>');
                else
                    $(e).html('<span title="Excluded" class="glyphicon glyphicon-ban-circle     red strokeRed"></span>');
            });
        }

        function setAuthorize() {
            var auth = !$("#Authorized").hasClass("on");
            var dat = new Object();
            dat.Authorized = auth;
            dat.ReviewId = "@Model.Review.Id";

            $.ajax({
                url: "/Review/Authorize",
                data: dat,
                method: "GET",
                success: function (data) {
                    showJsonAlert(data, false);
                    if (data.Object.Authorized) {
                        $("#Authorized").addClass("on");
                        $("#Authorized").addClass("active");
                        $("#Authorized").addClass("btn-success");
                        $("#Authorized").removeClass("btn-danger");
                        $("#Authorized").html("Authorized!");

                    } else {
                        $("#Authorized").removeClass("on");
                        $("#Authorized").removeClass("active");
                        $("#Authorized").removeClass("btn-success");
                        $("#Authorized").addClass("btn-danger");
                        $("#Authorized").html("Not Authorized");
                    }
                }

            })
        }

        $(function () {
            UpdateFeedbacks();
        });

        function IncludeChart() {
            var xId = $("#xAxis").val();
            var yId = $("#yAxis").val();

            var dat = new Object();
            dat.X = xId;
            dat.Y = yId;
            dat.ReviewId = "@Model.Review.Id";

            $.ajax({
                url: "/Review/AddChart",
                data: dat,
                method: "GET",
                success: function (data) {
                    var toAppend = '<li class="chart_' + data.Object.ChartId + '">' + data.Object.XTitle + " vs " + data.Object.YTitle + '<span onclick="RemoveChart(' + data.Object.ChartId + ')" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span></li>';
                    $("#charts").append(toAppend);
                }

            })
        }

        function RemoveChart(chartId) {
            var dat = new Object();
            dat.chartId = chartId;
            dat.reviewId = "@Model.Review.Id";

            $.ajax({
                url: "/Review/RemoveChart",
                data: dat,
                method: "GET",
                success: function (data) {
                    $(".chart_" + data.Object.ChartId).remove();
                }
            })
        }

    </script>
}

@using (Html.BeginStyles())
{
    <style>
        .chartButton {
            top: 39px;
            position: absolute;
            right: 39px;
        }

        .save {
            position: absolute;
            right: 26px;
            display: inline-block;
            border: 1px solid #AFADAD;
            padding: 3px;
            border-bottom-left-radius: 3px;
            background-color: #D1FCD1;
            opacity: 0;
            -webkit-transition: all .10s ease;
            -moz-transition: all .10s ease;
            -ms-transition: all .10s ease;
            -o-transition: all .10s ease;
            transition: all .10s ease;
        }

        .saving {
            opacity: .5;
        }
    </style>
    <link href="~/Content/chart.css" rel="stylesheet" />
}



<div class="row">
    <div class="col-lg-9">
        <div class="row" style="height: 0px;">
            <div class="col-sm-1 col-sm-offset-11" style="height: 0px; position: relative; top: 10px; left: -10px; z-index: 1000;">
                <a class="btn btn-default pull-right" href="@Url.Action("Details", "Reviews", new {id=Model.Review.ForReviewsId })">
                    Back
                </a>
            </div>
        </div>
        <div class="review " style=" min-width: 650px;">
            <div class="row">
                <div class="col-md-3 noPad" style="padding-bottom:20px;">
                    @Html.Partial("_User", Model.Review.ForUser)
                </div>
                <div class="col-md-9 ">
                    <div class="row noselect">
                        <form id="controls">
                            <div class="col-xs-6 alignRight ">
                                <div class="inlineBlock">
                                    <div class="alignCenter"><h4 class="axisTitle">X-Axis</h4></div>
                                    <div style="top:10px;"> @Html.DropDownListFor(x => x.xAxis, Model.Axis, new { @class = "form-control" })</div>
                                </div>
                            </div>
                            <div class="col-xs-6 alignLeft">
                                <div class="inlineBlock">
                                    <div class="alignCenter"><h4 class="axisTitle">Y-Axis</h4></div>
                                    <div> @Html.DropDownListFor(x => x.yAxis, Model.Axis, new { @class = "form-control" })</div>
                                </div>
                                <div title="Add this chart to the review." class="pull-right btn btn-default clickable chartButton" onclick="IncludeChart()">
                                    Add
                                </div>

                            </div>
                        </form>
                    </div>
                    <div class="row noselect">
                        <div class="col-md-12">
                            <div style="height:500px">
                                <svg id="visualisation"></svg>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">Feedback</h3>
                        </div>
                        <table class="fullWidth">
                            <tr>
                                <th></th>
                                <th style="width:120px">By</th>
                                <th>Feedback</th>
                                <th class="rightButton alignCenter">Included</th>
                            </tr>
                            @foreach (var feedback in Model.AnswersAbout.Where(x => x is FeedbackAnswer && x.Complete).Cast<FeedbackAnswer>())
                            {
                                <tr class="feedback feedback_@feedback.Id">
                                    <td></td>
                                    <td>@feedback.ByUser.GetName()</td>
                                    <td class="text">@feedback.Feedback</td>
                                    <td class="alignCenter clickable">
                                        @{
                                var on = Model.Review.ClientReview.FeedbackIds.ToListAlive().FirstOrDefault(x => x.Value == feedback.Id) != null;
                                        }
                                        <div onclick="SetFeedback(@feedback.Id)" class="check  @(on?"on":"")">
                                        </div>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="smallBreak"></div>
    </div>
    <div class="col-lg-3 ">
        <div class="sidebar" style="padding:10px;font-size:12px">
            <h3 class="alignCenter"><u>Build Report</u></h3>
            <div class="smallBreak"></div>
            <h4 class="alignCenter">Charts</h4>
            <ul class="noBullet" id="charts">
                @foreach (var chart in Model.Review.ClientReview.Charts.ToListAlive())
                {
                    <li class="chart_@chart.Id">
                        @Model.Categories[chart.Item1] vs @Model.Categories[chart.Item2]
                        <span onclick="RemoveChart(@chart.Id)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span>
                    </li>
                }
            </ul>
            <hr />
            <h4 class="alignCenter">Feedback</h4>
            <ul class="noBullet" id="feedbacks">
                @foreach (var feedback in Model.AnswersAbout.Where(x => x is FeedbackAnswer && x.Complete && Model.Review.ClientReview.FeedbackIds.ToListAlive().Any(y => y.Value == x.Id)).Cast<FeedbackAnswer>())
                {
                    <li class="feedback feedback_@feedback.Id">
                        @feedback.Feedback
                        <span onclick="SetFeedback(@feedback.Id,false)" title="Remove" class="pull-right glyphicon glyphicon-remove red strokeRed clickable"></span>
                    </li>
                }
            </ul>
            <hr />
            <h4 class="alignCenter">Notes</h4>
            <div class="save">Saving</div>
                        @Html.TextAreaFor(x => x.Review.ClientReview.ManagerNotes, new { placeholder = "Optional notes...", style = "width:100%;height:150px;resize:vertical;", id="ManagerNotes" })
            <hr />
            <div class="alignCenter">
                <div onclick="clickDetails()" class="btn btn-default" style="width:120px;">View</div>
                <div class="smallBreak"></div>
                <div title="Authorize the user to view this review.">
                    @*Html.CheckBox("Authorized", , new { onclick = "setAuthorize()" })*@
                    @if (Model.Review.ClientReview.Visible)
                    {
                        <div style="width:120px;" class="btn btn-success active on" onclick="clickAuthorize()" id="Authorized">Authorized!</div>
                    }
                    else
                    {
                        <div style="width:120px;" class="btn btn-danger" onclick="clickAuthorize()" id="Authorized">Not Authorized</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginScripts())
{
    <script src="/scripts/d3/d3.js"></script>
    <script src="/scripts/d3/d3.csv.js"></script>
    <script src="/scripts/d3/ScatterChart.js"></script>
    <script src="~/Scripts/jquery/jquery.ba-throttle-debounce.js"></script>
    <script>
        $(function(){
            $('#ManagerNotes').keyup( $.debounce( 500, saveText ) );
        });

        var axisSelect = [@(new HtmlString(String.Join(",",Model.Axis.Select(x=>"\""+x.Value+"\""))))];
        var axisLabels = [@(new HtmlString(String.Join(",", Model.Axis.Select(x => "\"" + x.Text + "\""))))];
        var legendData = [@(new HtmlString(String.Join(",", Enum.GetNames(typeof(RadialReview.Models.Enums.AboutType)).Select(x => "\"" + x + "\""))))];
        var getAxis = function () {
            var a = document.getElementById("xAxis"),
                b = document.getElementById("yAxis");
            //c = document.getElementById("r-axis");
            var x = a.options[a.selectedIndex].value,
                y = b.options[b.selectedIndex].value;
            //r = c.options[c.selectedIndex].value;
            var xindex = axisSelect.indexOf(x),
                yindex = axisSelect.indexOf(y);
            var xlabel = axisLabels[xindex],
                ylabel = axisLabels[yindex];
            return {
                xAxis: x,
                yAxis: y,
                //radiusAxis: r,
                xAxisLabel: xlabel,
                yAxisLabel: ylabel
            };
        };

        var dataUrl = "/Data/ReviewData/@Model.Review.ForUserId?reviewsId=@Model.Review.ForReviewsId";
        var dataFunc = function (dd, redrawFunc) {
            d3.csv(dataUrl, function (data) {
                // store data in the appropriate variables
                dd.data = data;
                redrawFunc();
            });
        };
        var chart = new Chart("#visualisation", getAxis, dataFunc, legendData);
        document.getElementById("controls").addEventListener("click", chart.update, false);
        document.getElementById("controls").addEventListener("keyup", chart.update, false);
        document.getElementById("xAxis").addEventListener("change", chart.update, false);
        document.getElementById("yAxis").addEventListener("change", chart.update, false);
    </script>
}
