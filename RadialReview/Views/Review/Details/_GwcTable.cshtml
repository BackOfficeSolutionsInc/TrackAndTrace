@using RadialReview.Models
@using RadialReview.Models.Enums
@model RadialReview.Controllers.ReviewController.ReviewDetailsViewModel

<div class="pull-right header">
	<input id="roleTableFilter" type="text" class="form-control" placeholder="Filter" />
</div>
<table class="tablesorter roleTable">
	<thead>
		<tr>
			<th>Name:</th>
			<th></th>
			<th>Role:</th>
			<th></th>
			<th>Reason:</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@{
			var gwcs = new[]{
				Tuple.Create<string,Func<GetWantCapacityAnswer,FiveState>,Func<GetWantCapacityAnswer,string>,Func<GetWantCapacityAnswer,bool>,string>("Gets It",x=>x.GetIt,x=>x.GetItReason,x=>x.IncludeGetItReason,"get"),
				Tuple.Create<string,Func<GetWantCapacityAnswer,FiveState>,Func<GetWantCapacityAnswer,string>,Func<GetWantCapacityAnswer,bool>,string>("Wants It",x=>x.WantIt,x=>x.WantItReason,x=>x.IncludeWantItReason,"want"),
				Tuple.Create<string,Func<GetWantCapacityAnswer,FiveState>,Func<GetWantCapacityAnswer,string>,Func<GetWantCapacityAnswer,bool>,string>("Capacity To Do It",x=>x.HasCapacity,x=>x.HasCapacityReason,x=>x.IncludeHasCapacityReason,"capacity")

			};

			//var sorter = new Dictionary<FiveState, string> { { FiveState.True, "1" }, { FiveState.Indeterminate, "" }, { FiveState.False, "-1" } };
			//var text = new Dictionary<FiveState, string> { { FiveState.True, "yes" }, { FiveState.Indeterminate, "n/a" }, { FiveState.False, "no" } };
			var sorter = new Dictionary<FiveState, string> { { FiveState.Always, "2" }, { FiveState.Mostly, "1" }, { FiveState.Indeterminate, "" }, { FiveState.Rarely, "-1" }, { FiveState.Never, "-2" } };
			var text = new Dictionary<FiveState, string> { { FiveState.Always, "always" }, { FiveState.Mostly, "mostly" }, { FiveState.Indeterminate, "n/a" }, { FiveState.Rarely, "rarely" }, { FiveState.Never, "never" } };
			
		}


		@foreach (var r in Model.AnswersAbout.Where(x => x is GetWantCapacityAnswer).Cast<GetWantCapacityAnswer>())
		{
			foreach (var gwc in gwcs)
			{
				<tr>
					<td>@r.ByUser.GetName()</td>
					<td class="alignLeft italic">@gwc.Item1</td>
					<td class="bold">@r.Askable.GetQuestion()</td>
					<td class="block">
						<div class="fill @gwc.Item2(r)" data-sort="@(sorter[gwc.Item2(r)])"></div><span style="display:none">@(sorter[gwc.Item2(r)]) @text[gwc.Item2(r)]</span>
					</td>
					<td class="remainingWidth" style="padding-left: 10px; white-space: normal;">
						@{
							var reason = gwc.Item3(r);
						}
						@if (!String.IsNullOrWhiteSpace(reason)){
							<span data-sort="0" class="italic">"@reason"</span>
						}
						else{
							<span data-sort="1"></span>
						}
					</td>
					<td>
						@if (!String.IsNullOrWhiteSpace(reason))
						{
							@:<input class="gwc_@(r.Id)_@(gwc.Item5)" type="checkbox" onclick="toggleGWC2(this, @(r.Id), '@(gwc.Item5)')" @(gwc.Item4(r) ? "checked" : "") />
							<span class="hidden">@(gwc.Item4(r) ? "b" : "c")</span>
						}
						else
						{
							<span class="hidden"></span>
						}
					</td>
				</tr>
			}
		}
	</tbody>
</table>
@using (Html.BeginScripts())
{
	<script>
		$(function () {
			$(".roleTable").filterTable({ inputSelector: '#roleTableFilter' });
			$(".roleTable").tablesorter({
				headers: {
					3: { sorter: 'attr' },
					4: { sorter: 'attr' }
				},
				/*sortForce: [[0, 1]],*/
				sortStable: true,
				sortList: [[4, 0],[3, 0]],
			});
		});
		function toggleGWC2(s, id, gwc) {
			var found = $(s).prop("checked");
			var clzz = "input.gwc_" + id + "_" + gwc;
			$(clzz).prop("disabled", true);
			$.ajax({
				url: "/Review/SetIncludeGWCFeedback?answerId=" + id + "&on=" + found + "&gwc=" + gwc,
				success: function (d) {
					$(clzz).prop("checked", d.Object.On);
					var c = "c";
					if (d.Object.On)
						c = "b";
					$(clzz + "~span").html(c);
				},
				complete: function () {
					$(clzz).prop("disabled", false);
				}
			});
		}
	</script>
}