@model long

@using (Html.BeginStyles())
{
    <link href="~/Content/Chart/PieChart.css" rel="stylesheet" />
    <style>
        .reviewData h3 {
            color: #6D6D6D;
        }

		.amt {
			fill: #eee;
		}
    </style>
}
<div style="position:relative;">
	<div class="reviewDataLoader1" style="position:absolute;opacity:1;width:100%;height:100%;"><img src="/Content/img/ajax-loader.gif" style="top:48%;top:calc(50% - 6px);left:48%;left:calc(50% - 7px);position:absolute;"></div>
	<div class="reviewData" style="opacity:0;">
		<div class="row">
			<div class="col-md-6">
				<h3 class="alignCenter noMargin">Evaluations Completed</h3>
				<div id="pie1" style="min-height: 400px; height: 400px; "></div>
			</div>
			<div class="col-md-6">
				<h3 class="alignCenter noMargin">Reports Completed</h3>
				<div id="pie2" style="min-height: 400px; height: 400px;"></div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<div class="row">
					<div class="col-xs-6 smallPad smallBreak2">
						<div class="stats">
							<h1 id="reviewsCompleted" class="scramble resize1" data-range="99" style="font-size: 486%;"></h1>
							<h6>evaluations completed</h6>
						</div>
					</div>
					<div class="col-xs-6 smallPad smallBreak2">
						<div class="stats">
							<h1 id="questionsAnswered" class="scramble resize1" data-range="1500" style="font-size: 486%;"></h1>
							<h6>questions answered</h6>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-6">
				<div class="row">
					<div class="col-xs-6 smallPad smallBreak2">
						<div class="stats">
							<div class="alignCenter">
								<div class="resize1" style="margin-top: 20px; margin-bottom: 10px; line-height: 1.1;font-size: 486%;">
									<span id="minutesPerReview" class="scramble" data-range="26"></span>
									<span class="scramble" style="width: 0px; font-size: 25%; display: inline-block; margin-left: -10px; ">mins</span>
								</div>
							</div>
							<h6>per evaluation</h6>
							<h4>(on average)</h4>
						</div>
					</div>
					<div class="col-xs-6 smallPad smallBreak2">
						<div class="stats">
							<h1 id="optionalAnswered" class="scramble resize1" data-range="200" style="font-size: 486%;"></h1>
							<h6>optional questions answered</h6>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@using (Html.BeginScripts())
{
    <script src="~/Scripts/d3/d3.v3.js"></script>
    <script src="~/Scripts/d3/Tweens.js"></script>
    <script src="~/Scripts/jquery/jquery.fittext.js"></script>
    <script>
        function playSound(soundfile) {
            $(".sound").html("").append("<embed src=\""+soundfile+"\" hidden=\"true\" autostart=\"true\" loop=\"false\" />");
        }

        $(function () {
            pullData();

            $("body").append("<div class='sound'></div>");

            var reviewsData = {};
            var reportsData = {};

            var interval = null;
            var reviewId =  @Model;
            var currentData = null;

            var compress=1.0;
            
            fitToBox(".resize");

            window.addEventListener('resize', function(event){
                fitToBox(".resize");
            });

            var allowSound=false;

            function updateReviewStats(data) {
                if (currentData==null)
                {
                    currentData = {
                        Completion : {
                            Started :0,
                            Finished:0,
                            Unstarted:0,
                        },
                        Reports :{
                            Unstarted:0,
                            Started:0,
                            Signed:0,
                            Visible:0,
                        },
                        Stats:{
                            ReviewsCompleted:0,
                            QuestionsAnswered:0,
                            MinsPerReview :0,
                            OptionalsAnswered:0,
                        }
                    };
                }

                data = data.Object;
                if (reviewId == data.ReviewId) {
                    if (true) {
                        if (data.Completion && data.Completion.Started) {
                            currentData.Completion.Started+=data.Completion.Started;
                            reviewsData["Started"] = { title: "Started", value: currentData.Completion.Started, color: "#8a89a6" };
                        }
                        if (data.Completion && data.Completion.Finished) {
                            currentData.Completion.Finished+=data.Completion.Finished;
                            reviewsData["Completed"] = { title: "Completed", value: currentData.Completion.Finished, color: "#98abc5" };
                        }
                        if (data.Completion && data.Completion.Unstarted) {
                            currentData.Completion.Unstarted+=data.Completion.Unstarted;
                            reviewsData["Unstarted"] = { title: "Unstarted", value: currentData.Completion.Unstarted, color: "#7b6888" };
                        }
                        //values2 = [3, 4, 5, 6];
                        updatePie("#pie1", reviewsData, 1000);
                    }
                    if (true) {
                        if (data.Reports && data.Reports.Unstarted) {
                            currentData.Reports.Unstarted+=data.Reports.Unstarted;
                            reportsData["Unstarted"] = { title: "Unstarted", value: currentData.Reports.Unstarted, color: "#A05D56" };
                        }
                        if (data.Reports && data.Reports.Started) {
                            currentData.Reports.Started+=data.Reports.Started;
                            reportsData["Started"] = { title: "Started", value: currentData.Reports.Started, color: "#D0743C" };
                        }
                        if (data.Reports && data.Reports.Signed) {
                            currentData.Reports.Signed+=data.Reports.Signed;
                            reportsData["Signed"] = { title: "Signed", value: currentData.Reports.Signed, color: "#FF8C00" };
                        }
                        if (data.Reports && data.Reports.Visible) {
                            currentData.Reports.Visible+=data.Reports.Visible;
                            reportsData["Shared"] = { title: "Shared", value: currentData.Reports.Visible, color: "#FFC01D" };
                        }

                        updatePie("#pie2", reportsData, 1000);
                    }
                    if (interval) {
                        clearInterval(interval);
                    }
                    $(".scramble").removeClass("scrambling");
                    var resize = false;
                    if (data.Stats && data.Stats.ReviewsCompleted !== undefined)
                    {
                        currentData.Stats.ReviewsCompleted+=data.Stats.ReviewsCompleted;
                        $("#reviewsCompleted").html(currentData.Stats.ReviewsCompleted).removeClass("scrambling");
                        resize=true;
                    }
                    if (data.Stats && data.Stats.QuestionsAnswered !== undefined){
                        currentData.Stats.QuestionsAnswered+=data.Stats.QuestionsAnswered;
                        $("#questionsAnswered").html(currentData.Stats.QuestionsAnswered).removeClass("scrambling");
                        resize=true;
                    }

                    if (data.Stats && data.Stats.MinsPerReview !== undefined) {
                        currentData.Stats.MinsPerReview+=data.Stats.MinsPerReview;
                        var mins = currentData.Stats.MinsPerReview;
                        if (mins > 10)
                            mins = Math.round(mins);
                        else
                            mins = (Math.round(mins * 10) / 10).toFixed(1);
                        $("#minutesPerReview").html(mins).removeClass("scrambling");
                        resize=true;
                    }
                    if (data.Stats && data.Stats.OptionalsAnswered !== undefined) {
                        currentData.Stats.OptionalsAnswered+=data.Stats.OptionalsAnswered;
                        $("#optionalAnswered").html(currentData.Stats.OptionalsAnswered).removeClass("scrambling");
                        resize=true;
                    }

                    if (resize){
                        fitToBox(".resize");
                    }

                    if (allowSound){
                        playSound("/Content/audio/tick.mp3");
                    }

                    allowSound =true;
                }
				
                $(".reviewData").animate({ opacity: 1 });
                $(".reviewDataLoader1").animate({ opacity: 0 });
            }

            //alertHub.client.updateReviewStats = updateReviewStats;

            function pullData() {
                /*interval = setInterval(function () {
                    $(".scramble").each(function () {
                        if ($(this).data("range")) {
                            var max = parseInt($(this).data("range"));
                            $(this).html(Math.round((Math.random() / 2.0 + 0.5) * max));
                        }
                    });
                }, 50);*/
                $(".scramble [data-range]").html("NA");

                $(".scramble").addClass("scrambling");

                createPie("#pie1", { "empty": { title: "Loading", value: 1, color: "#7b6888" } }); // ["Unstarted"], [1], ["#7b6888"]);
                createPie("#pie2", { "empty": { title: "Loading", value: 1, color: "#A05D56" } }); // ["Unstarted"], [1], ["#A05D56"]);

                $.ajax({
                    url: "/Data/ReviewsData/@Model",
                    success: updateReviewStats
                });
            }

            var charts = 0;

            function sumPieSlices(pieData) {
                var sum = 0;
                for (var k in pieData) {
                    sum += pieData[k].value;
                }
                return sum;
            }

            function pieTitles(pieData) {
                var titles = [];
                for (var k in pieData) {
                    titles.push(pieData[k].title);
                }
                return titles;
            }

            function pieColors(pieData) {
                var colors = [];
                for (var k in pieData) {
                    colors.push(pieData[k].color);
                }
                return colors;
            }
            function pieValues(pieData) {
                var values = [];
                for (var k in pieData) {
                    values.push(pieData[k].value);
                }
                return values;
            }

            function createPie(selector, pieData) {
                var ref = 900;
                var svg = d3.select(selector + "").html("").append("svg")
                                .attr("viewBox", "0 0 " + ref + " " + ref / 2)
                                .attr("height", "100%")
                                .attr("width", "100%")
                                .attr("class", "piechart")
								.style("overflow","visible")
                            .append("g");

                svg.append("g").attr("class", "slices");
                svg.append("g").attr("class", "labels");
                svg.append("g").attr("class", "lines");

                svg.attr("transform", "translate(" + ref / 2 + "," + ref / 2 / 2 + ")");
                var center = svg.append("g").attr("class", "centerNumber").attr("transform", "translate(0,10)").style("text-anchor", "middle").append("text")
                    .text(sumPieSlices(pieData));
                var centerText = svg.append("g").attr("class", "centerText").attr("transform", "translate(0,45)").style("text-anchor", "middle").append("text")
                    .text("Total");

                updatePie(selector, pieData,0);
            }

            function updatePie(selector, pieData, animationSpeed) {
                var ref = 900;
                var svg = d3.select(selector + " svg");
                var width = ref * .7, height = ref, radius = Math.min(width, height) / 2;
                var startA = 1.7;
                var endA = startA + 2 * Math.PI;

                var titles = pieTitles(pieData);
                var colors = pieColors(pieData);
                var values = pieValues(pieData);

                var color = d3.scale.ordinal().domain(titles).range(colors);
                var pie = d3.layout.pie().sort(null).startAngle(startA).endAngle(endA).value(function (d) { return d.value; });
                var key = function (d) { return d.data.label; };
                var outerArc = d3.svg.arc().innerRadius(radius * 0.9).outerRadius(radius * 0.9);
                var arc = d3.svg.arc().outerRadius(radius * 0.8).innerRadius(radius * 0.4);

                var center = svg.select(".centerNumber text");
                var centerText = svg.select(".centerText text");

                center.transition().duration(200).tween("text", function (d) { return tweenValue(this, sumPieSlices(pieData)); });
                centerText.transition().duration(200).text("Total");

                function genDat() {
                    var labels = color.domain();
                    return labels.map(function (label, i) {
                        return { label: label, value: values[i] };
                    });
                }

                change(genDat(), animationSpeed);

                function change(data, animationSpeed) {


                    /* ------- PIE SLICES -------*/
                    /*
                    var shifted=pie(data);
                    var by=2.35619449019;

                    for(var i=0;i<shifted.length;i++)
                    {
                        shifted[i].
                    }*/
                    var animationSpeed = animationSpeed || 300;

                    var slice = svg.select(".slices").selectAll("path.slice").data(pie(data), key);

                    slice.enter().insert("path")
                        .style("fill", function (d) { return color(d.data.label); }).attr("class", "slice");

                    slice.on("mouseover", function (d) {
                        center.transition().duration(300).tween("text", function (e) { return tweenValue(this, d.value); });
                        centerText.text(d.data.label);
                    }).on("mouseout", function (d) {
                        center.transition().duration(300).tween("text", function (e) { return tweenValue(this, d3.sum(values)); });
                        centerText.text("Total");
                    }).transition().duration(animationSpeed).attrTween("d", function (d) {
                        this._current = this._current || d;
                        var interpolate = d3.interpolate(this._current, d);
                        this._current = interpolate(0);
                        return function (t) {
                            return arc(interpolate(t));
                        };
                    })

                    slice.exit().remove();

                    /* ------- TEXT LABELS -------*/

                    var text = svg.select(".labels").selectAll("text")
                        .data(pie(data), key);

                    var entering = text.enter().append("g");
                	entering.append("text").attr("dy",function(d) {
							return ".35em";
						}).text(function(d) {
                            return d.data.label;
                        });
                    entering.append("text")
                        .attr("dy", "1.45em")
						.attr("class","amt")
                        .attr("font-size","35px")
                        .text(function (d) {
                            return d.data.value;
                        });

                    function resetAngle(a) {
                        return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));
                    }

                    function midAngle(d) {
                        return resetAngle(d.startAngle + (d.endAngle - d.startAngle) / 2);
                    }


                    text.transition().duration(animationSpeed)
                        .attrTween("transform", function (d) {
                            this._current = this._current || d;
                            var interpolate = d3.interpolate(this._current, d);
                            this._current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                var pos = outerArc.centroid(d2);
                                pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                                return "translate(" + pos + ")";
                            };
                        })
                        .styleTween("text-anchor", function (d) {
                            this._current = this._current || d;
                            var interpolate = d3.interpolate(this._current, d);
                            this._current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                return midAngle(d2) < Math.PI ? "start" : "end";
                            };
                        });

                    text.exit().remove();

                    /* ------- SLICE TO TEXT POLYLINES -------*/

                    var polyline = svg.select(".lines").selectAll("polyline")
                        .data(pie(data), key);

                    polyline.enter()
                        .append("polyline");

                    polyline.transition().duration(animationSpeed)
                        .attrTween("points", function (d) {
                            this._current = this._current || d;
                            var interpolate = d3.interpolate(this._current, d);
                            this._current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                var pos = outerArc.centroid(d2);
                                pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return [arc.centroid(d2), outerArc.centroid(d2), pos];
                            };
                        });

                    polyline.exit().remove();
                };
            }

        });
    </script>
}