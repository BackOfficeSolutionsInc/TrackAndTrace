@model RadialReview.Models.Reviews.CustomizeModel
@*<script src="/Scripts/bootstrap-datepicker.js"></script>*@
<style>
	.customizeSelection .bordered {
		border: 1px solid #808080;
	}

	.customizeSelection label {
		font-weight: normal;
	}

	.customizeSelection .counter {
		padding-left: 4px;
		border-right: 1px solid #D3D3D3;
		padding-right: 4px;
		width: 40px;
	}

	.customizeSelection .hideable:not(show) {
		/*display: none;*/
	}

	.customizeSelection .select, .deselect {
		cursor: pointer;
	}

	.customizeSelection .customize .selected {
		background-color: #fbdeca;
		color: #000;
	}

	.customizeSelection .shiftedCheckbox {
		margin: 0px !important;
		position: relative;
		top: 2px;
	}

	.customizeSelection .hovered.deselect {
		color: #CF4242;
	}

	.customizeSelection .select.hovered {
		color: #3B3;
	}

	.customizeSelection .hideable {
		left: 0px;
	}

		.customizeSelection .hideable:not(.selected) {
			left: 50px;
			opacity: 0;
			-webkit-transition: opacity 400ms ease-in-out, left 600ms ease-in-out;
			-moz-transition: opacity 400ms ease-in-out, left 600ms ease-in-out;
			-ms-transition: opacity 400ms ease-in-out, left 600ms ease-in-out;
			-o-transition: opacity 400ms ease-in-out, left 600ms ease-in-out;
			transition: opacity 400ms ease-in-out, left 600ms ease-in-out;
		}
</style>

<div class="customizeSelection">
	<br /><br />
	<ul class="nav nav-tabs nav-tabs-line" role="tablist">
		<li role="presentation" class="active"><a href="#simple" aria-controls="home" role="tab" data-toggle="tab">Simple</a></li>
		<li role="presentation" class=""><a href="#advanced" aria-controls="home" role="tab" data-toggle="tab">Advanced <span class="hidden-xs">Customization</span></a></li>
	</ul>
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="simple">
			<br />
			<div class="" data-toggle="buttons">
				<label class="btn btn-default dflt-button simple-btn active" title="Supervisors review direct reports only">
					<input type="radio" name="review_type" id="review_S2D" autocomplete="off" checked>Supervisor <b>&rArr;</b> Direct Report
				</label>
				<label class="btn btn-default  simple-btn" title="Supervisors review direct reports and vise versa">
					<input type="radio" name="review_type" id="review_S2D_D2S" autocomplete="off"> Supervisor <b>&hArr;</b> Direct Report
				</label>
				<label class="btn btn-default  simple-btn" title="Supervisors, Direct Reports and Teammembers review each other.">
					<input type="radio" name="review_type" id="review_360" autocomplete="off"> 360° Review
				</label>
				<label class="btn btn-default simple-btn" title="No reviewer-reviewees selected">
					<input type="radio" name="review_type" id="review_S" autocomplete="off">Blank Review
				</label>
				<label class="btn btn-default simple-btn hidden customizedReviewButton" title="Customized">
					<input type="radio" name="review_type" id="review_Customized" autocomplete="off">Customized
				</label>
			</div>

			<br />

			<br />
			<h2 class="smallBreak2">Employees Evaluate Themselves?</h2>
			<div class="" data-toggle="buttons">
				<label class="btn btn-default dflt-button active simple-btn-yn">
					<input type="radio" name="self_review" id="review_self" autocomplete="off" checked> Yes
				</label>
				<label class="btn btn-default simple-btn-yn">
					<input type="radio" name="self_review" id="review_notself" autocomplete="off"> No
				</label>
			</div>
			<br />

		</div>
		<div role="tabpanel" class="tab-pane" id="advanced">
			<br />
			<div class="row">
				<div class="col-sm-5 col-sm-push-7">
					<div class="well">
						<p>
							Customize who evaluates who. The highlighted individual in the left column evaluates the selected individuals in the right column. Use the
							<abbr onmouseover="$('.quickSelect').addClass('hovered');" onmouseout="$('.quickSelect').removeClass('hovered');">selectors</abbr>
							to select/deselect from all individuals simultaneously.
						</p>
					</div>
				</div>
				<div class="col-sm-7 col-sm-pull-5 smallBreak2">
					@foreach (var s in Model.Selectors) {
						<div class="row ">
							<div class="alignRight col-xs-6">@(s.Name)</div> <div class="alignLeft quickSelect col-xs-6" data-checkclass="is@(s.UniqueId)">       (<a class="select">select</a> | <a class="deselect">deselect</a>)</div>
						</div>
					}
				</div>
			</div>
			<div> &nbsp;</div>
			<div class="row">

				<div class="col-sm-10 col-sm-offset-1 bordered noselect">
					<div class="row bold" style="border-bottom:1px solid #808080;">
						<div class="col-xs-4">This person</div>
						<div class="col-xs-1">&#10148;</div>
						<div class="col-xs-2">evaluates</div>
						<div class="col-xs-1">&#10148;</div>
						<div class="col-xs-4">This person</div>
					</div>

					<div class="row" style="overflow: hidden; background-color: #fbdeca;">
						<div class="col-xs-6 customize noPad" style="background-color: white;">
							@*<div id="" class="">&nbsp;</div>*@

							@{
								var first = true;
								var firstId = -1L;
								var index = 0;
							}
							@foreach (var id in Model.MasterList) {
								var firstUsers = Model.Reviewers.Where(x => x.RGMId == id).ToList();
								var otherSide = Model.AllReviewees.Where(x => x.RGMId == id).ToList();
								for (var i = 0; i < Math.Max(firstUsers.Count, otherSide.Count); i++) {
									if (i >= firstUsers.Count) {
										<div class="emptyRow reviewerRow"><div class="pull-left counter">&nbsp;</div>&nbsp;</div>
									} else {
										var user = firstUsers[i];
										<div id="first_@user.RGMId" class="@(first ? "selected" : "") selectable clickable reviewerRow" data-id="@(user.RGMId)" onclick="unhide(@user.RGMId)">
											<div class="pull-left counter"> 0</div>
											@user._Name
										</div>
										if (first) {
											firstId = user.RGMId;
										}
										first = false;
									}
									index += 1;
								}
							}
							@*@for (int i = index; i < Model.MasterList.Count - 1; i++) {
									<div id="" class="">
										<div class="pull-left counter">&nbsp;</div>
										&nbsp;
									</div>
								}*@
						</div>
						@{
							first = true;
						}
						@foreach (var firstUser in Model.Reviewers) {
							<div id="second_@firstUser.RGMId" class="col-xs-6 noPad alignLeft customize hideable revieweeBlock @(first ? "selected" : "hide")">
								@foreach (var id in Model.MasterList) {
									var otherSide = Model.Reviewers.Where(x => x.RGMId == id).ToList();
									var secondUsers = Model.AllReviewees.Where(x => x.RGMId == id).ToList();

									for (var i = 0; i < Math.Max(secondUsers.Count, otherSide.Count); i++) {
										if (i >= secondUsers.Count) {
											<div class="emptyRow revieweeRow">&nbsp;</div>
										} else {
											//foreach (var secondUser in secondUsers) {
											var secondUser = secondUsers[i];
											// var classes = new HashSet<String>();

											var itemLookup = Model.Lookup[firstUser.ToId() + "~" + secondUser.ToId()];
											var selected = itemLookup.Selected;
											var classes = itemLookup.Classes;


											if (selected /*Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser)*/) {
												<input type="hidden" name="originalCustomize_@(firstUser.RGMId)_@secondUser.ToId()" value="True" />
											}
											<div class="selected isAll @String.Join(" ", classes) revieweeRow">
												<label class="noMargin" style="padding-left:15px;">
													<input data-original="@(Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser) ? "checked" : "")" @(Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser) ? "checked" : "")
														   class="shiftedCheckbox customizeBoxes parent_first_@(firstUser.RGMId)" data-parent="first_@(firstUser.RGMId)" type="checkbox" name="customize_@(firstUser.RGMId)_@secondUser.ToId()" />
													@secondUser._Name
												</label>
											</div>
											//}
										}
									}
								}
							</div>
							first = false;
						}

					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
@*========================================*@
@*===DON'T DELETE. FOR CONVERSION LATER===*@
@*========================================*@

	@*var data = {
		reviewers: [
			@{
				first = true;
				firstId = -1L;
				index = 0;
			}
			@foreach (var id in Model.MasterList) {
				var firstUsers = Model.Reviewers.Where(x => x.RGMId == id).ToList();
				var otherSide = Model.AllReviewees.Where(x => x.RGMId == id).ToList();
				for (var i = 0; i < Math.Max(firstUsers.Count, otherSide.Count); i++) {
					if (i >= firstUsers.Count) {
						@:null,
						//<div class="emptyRow reviewerRow"><div class="pull-left counter">&nbsp;</div>&nbsp;</div>
					} else {
						var user = firstUsers[i];
						@:{name:"@(Html.Encode(user._Name))",RGMId:@(user.RGMId),selected:@((""+first.ToString()).ToLower()),counter:0},
						//<div id="first_@user.RGMId" class="@(first ? "selected" : "") selectable clickable reviewerRow" data-id="@(user.RGMId)" onclick="unhide(@user.RGMId)">
						//	<div class="pull-left counter"> 0</div>
						//	@user._Name
						//</div>
							if (first) {
								firstId = user.RGMId;
							}
							first = false;
					}
					index += 1;
				}
			}
		],
		links: [
			@{
				first = true;
			}
			@foreach (var firstUser in Model.Reviewers) {
				//<div id="second_@firstUser.RGMId" class="col-xs-6 noPad alignLeft customize hideable revieweeBlock @(first ? "selected" : "hide")">
				@:{selected : @((""+first.ToString()).ToLower()),reviewer:@(firstUser.RGMId)),
					foreach (var id in Model.MasterList) {
						var otherSide = Model.Reviewers.Where(x => x.RGMId == id).ToList();
						var secondUsers = Model.AllReviewees.Where(x => x.RGMId == id).ToList();

						for (var i = 0; i < Math.Max(secondUsers.Count, otherSide.Count); i++) {
							if (i >= secondUsers.Count) {
								<div class="emptyRow revieweeRow">&nbsp;</div>
					} else {
					//foreach (var secondUser in secondUsers) {
								var secondUser = secondUsers[i];
					// var classes = new HashSet<String>();

								var itemLookup = Model.Lookup[firstUser.ToId() + "~" + secondUser.ToId()];
								var selected = itemLookup.Selected;
								var classes = itemLookup.Classes;


								if (selected /*Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser)*/) {
									<input type="hidden" name="originalCustomize_@(firstUser.RGMId)_@secondUser.ToId()" value="True" />
				}
								<div class="selected isAll @String.Join(" ", classes) revieweeRow">
									<label class="noMargin" style="padding-left:15px;">
										<input data-original="@(Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser) ? "checked" : "")" @(Model.Selected.Any(x => x.Reviewer == firstUser && x.Reviewee == secondUser) ? "checked" : "")
												class="shiftedCheckbox customizeBoxes parent_first_@(firstUser.RGMId)" data-parent="first_@(firstUser.RGMId)" type="checkbox" name="customize_@(firstUser.RGMId)_@secondUser.ToId()" />
										@secondUser._Name
									</label>
								</div>
					//}
				}
				}
				}
				</div>
				first = false;
				}


		],
	};*@





	function UpdateSimple() {
		var rtype = $(" [name='review_type']:checked").attr("id");
		var rself = $(" [name='self_review']:checked").attr("id");

		debugger;
		if (rtype != "review_Customized" && rtype !== undefined) {
			$(".customizeBoxes").attr("checked", null);
			switch (rtype) {
				case "review_360": $(".isDefault input, .isOrganization input").prop("checked", true); break;
				case "review_S2D_D2S": $(".isSupervisors input, .isDirectReports input, .isOrganization input").prop("checked", true); break;
				case "review_S2D": $(".isDirectReports input, .isOrganization input").prop("checked", true); break;
				case "review_S": break;
			}
		}

		switch (rself) {
			case "review_self": $(".isSelf input").prop("checked", "checked"); break;
			case "review_notself": $(".isSelf input").prop("checked", null); break;
		}

		updateAll();
	}

	function updateCount(parent) {
		var count = 0;
		$(".parent_" + parent).each(function () {
			if ($(this).is(":checked")) {
				count++;
			}
		});
		$("#" + parent + " .counter").html(count);
	}

	function start_Customize() {
		setTimeout(function () {
			$(document).off("change", ".simple-btn input,.simple-btn-yn input");
			$(document).on("change", ".simple-btn input,.simple-btn-yn input", function () {
				UpdateSimple();
				if ($(this).parent().is(".simple-btn")) {
					$(".customizedReviewButton").addClass("hidden");
				}
			});


			@if (!Model.Selected.Any()){
				@:UpdateSimple();
									}
			else{
				@:$('.customizeSelection a[href="#advanced"]').tab('show');
									}
			$(".quickSelect a").hover(function () {
				var parent = $(this).parent().get(0);
				var clss = $(parent).data("checkclass");
				$("." + clss + " label").addClass("hovered");
				if ($(this).hasClass("select")) {
					$("." + clss + " label").addClass("select");
				}
				if ($(this).hasClass("deselect")) {
					$("." + clss + " label").addClass("deselect");
				}

			}, function () {
				var parent = $(this).parent().get(0);
				var clss = $(parent).data("checkclass");
				var value = $(this).hasClass("select");
				$("." + clss + " label").removeClass("hovered");
				$("." + clss + " label").removeClass("deselect");
				$("." + clss + " label").removeClass("select");

			})

			$(".customizeBoxes").change(function () {
				var parent = $(this).data("parent");
				updateCount(parent);
				$(".customizedReviewButton").removeClass("hidden").addClass("active").attr("checked", "checked");
				$("#simple .dflt-button:not(.simple-btn-yn)").removeClass("active").find("input").attr("checked", null);
			});

			$(".quickSelect a").click(function (item) {
				var parent = $(this).parent().get(0);

				var clss = $(parent).data("checkclass");
				var value = $(this).hasClass("select");
				$("." + clss + " input").prop("checked", value);
				updateAll();
			});
			updateAll();
		}, 100);
	}

	//var existingHide = null;

	function unhide(id) {
		$(".selectable").removeClass("selected");
		$("#first_" + id).addClass("selected");
		//var spd = 600;
		// $(".hideable.selected").addClass("animateHide");
		var toHide = $(".hideable.selected");
		toHide.removeClass("selected");
		toHide.addClass("remove");

		setTimeout(function () {

			$(".selected.revieweeBlock").addClass("hide");

			$(".hideable.remove").addClass("hide");
			$("#second_" + id).removeClass("hide");
			$("#second_" + id).addClass("selected");

		}, 400);
		//$("#second_" + id).removeClass("animateHide");
		/*$(".hideable.show").animate({ opacity: 0, left: "50" }, spd, function (){
			var oldPage = $(this);
			oldPage.removeClass("show");
			oldPage.css("left", "0");
			var newPage = $("#second_" + id);
			newPage.css("opacity", "0");
			newPage.css("left", "-50");
			newPage.addClass("show");
			newPage.animate({ opacity: 1, left: "0" }, spd);
		});*/
		//$(".hideable").removeClass("show");

	}

	function updateAll() {
		$(".selectable").each(function () {
			updateCount($(this).attr("id"));
		});
	}
</script>
<img src="/i/wait" onload="start_Customize()" />


<style>
	.simple-btn {
		width: 260px;
		margin-top: 4px;
	}

	.simple-btn-yn {
		width: 128px;
		margin-top: 4px;
	}

	.simple-btn:not(.active) {
		color: #5e5e5e;
		/*background-color: #FFF;*/
		border-color: #CCC;
	}

	.quickSelect.hovered {
		color: orange;
	}

	abbr {
		border-bottom: 1px dotted gray;
	}

	.reviewerRow, .revieweeRow {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
</style>