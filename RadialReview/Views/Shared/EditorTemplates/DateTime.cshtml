@model DateTime?

@{
	var lookups = new Dictionary<string, string>() {
		{"today","new Date()" },
		{"tomorrow",@" (function(){
							var currentDate = new Date();
							currentDate.setDate(currentDate.getDate() + 1);
							return currentDate;
						})()" }

	};


	if (ViewData["startDate"] is DateTime) {
		ViewData["startDate"] = ((DateTime)ViewData["startDate"]).ToJavascriptMilliseconds();
	}
	if (ViewData["endDate"] is DateTime) {
		ViewData["endDate"] = ((DateTime)ViewData["endDate"]).ToJavascriptMilliseconds();
	}

	if (ViewData["startDate"] is long) {
		ViewData["startDate"] = "new Date(" + ViewData["startDate"] + ")";
	}

	if (ViewData["endDate"] is long) {
		ViewData["endDate"] = "new Date(" + ViewData["endDate"] + ")";
	}

	if (ViewData["startDate"] is string) {
		ViewData["startDate"] = lookups.GetOrDefault((string)ViewData["startDate"], (string)ViewData["startDate"]);
	}
	if (ViewData["endDate"] is string) {
		ViewData["endDate"] = lookups.GetOrDefault((string)ViewData["endDate"], (string)ViewData["endDate"]);
	}

	bool localize = ViewData["localize"] as bool? == true;

	var startDate = ViewData["startDate"]??"-Infinity";
	var endDate = ViewData["endDate"]??"Infinity";



	bool allowEmpty = ViewData["allowEmpty"] as bool? == true;


	var guid = "date-"+Guid.NewGuid().ToString();
	string name = null;
	if (Html.NameForModel()!=null && !String.IsNullOrWhiteSpace(Html.NameForModel().ToString())) {
		name = Html.NameForModel().ToString();

	}
	name = name ?? ViewData["name"] as string ?? "Date";
	var id = ViewData["id"] ?? name;
	var jsDate = "{Local:true, Date: new Date()}";
	if (Model != null) {
		jsDate = "{Local:false, Date: new Date(" + (Model.Value.Year) + "," + (Model.Value.Month - 1) + "," + Model.Value.Day + "," + Model.Value.Hour + "," + Model.Value.Minute + "," + Model.Value.Second + ")}";
	} else if (allowEmpty) {
		jsDate = "false";
	}
	var options = "{startDate:" + startDate + ",endDate:" + endDate + "}";

	var method = "generateDatepicker";
	if (localize) {
		method = "generateDatepickerLocalize";
	}

	if (ViewData["correctDate"] as bool? ?? false) {
		method = "createDatepicker";
	}


	var generater = new MvcHtmlString(method+"('." + guid + "'," + jsDate + ",'" + name + "','" + id + "',"+options+");");
	}
<div class="date-container test-ignore @guid" id="@guid"></div>

<script type="text/javascript">
	var generate@(guid.Replace("-","")) = function () {
		var count = count || 0;
		count += 1;
		if (typeof (generateDatepicker) === "undefined") {
			if (count < 500) { setTimeout(generate@(guid.Replace("-", "")), 10); }
			else {document.getElementById("@guid").innerHTML = "Err: No Date Generator";}
		} else {
			@generater

		}
	};
	generate@(guid.Replace("-",""))();
</script>
    
    
@*/*string format=null;
    if (!string.IsNullOrWhiteSpace(ViewData["format"] as string)) {
        format = ViewData["format"] as string;
    } else {
        var org = Html.Organization();
        if (org != null && org.Settings != null) {
            format = org.Settings.GetDateFormat();
        } else {
            @:<!--Organization Not Loaded, using default format-->
        }
    }
    format = format ?? "MM-dd-yyyy";*/<div class="input-append date form-group"data-date="@(Model == null ? "" : Model.Value.ToString(format))" data-date-format="@(format.ToLower())">
        @*Html.TextBoxFor(x => Model, new { @class = "form-control col-xs-2", id = "Date", name = ViewData["name"]??"Date" })*
        <input class="form-control col-xs-2 @guid" data-val="true" data-val-date="The field Model must be a date." type="text" value="@(Model == null ? "" : Model.Value.ToString(format))">

        <!--input name="date" id="date" class="form-control col-xs-2" size="30" type="text" value=""-->
        <span class="add-on"><i class="icon-th"></i></span>
        <input type="hidden" class="h-@guid" id="@(id)" name="@(name)" value="@(Model == null ? "" : Model.Value.ToString("MM-dd-yyyy"))" />
    </div>*@
@*var nowTemp = new Date();
    var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);
    $('.@guid').datepickerX({
        format: '@Html.Organization().Settings.GetDateFormat().ToLower()',
        onRender: function (date) {
            return date.valueOf() <= now.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (e) {
        debugger;
        var _d = e.date.getDate(),
            d = _d > 9 ? _d : '0' + _d,
            _m = e.date.getMonth()+1,
            m = _m > 9 ? _m : '0' + _m,
            formatted = m + '-' + d + '-'+e.date.getFullYear() ;
        $('.h-@guid').val(formatted);
    });*@