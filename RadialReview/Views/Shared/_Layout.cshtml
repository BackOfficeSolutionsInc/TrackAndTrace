@using Microsoft.AspNet.Identity
@using RadialReview.Properties
<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="SHORTCUT ICON" href="/content/favicon.ico" />

    <title>@ViewBag.Title - @RadialReview.Properties.ProductStrings.ProductName</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @RenderSection("styles", required: false)
    @Html.PageStyles()

</head>
@if (ViewBag.HasBaseController == null)
{
    throw new Exception("You must extend from the base controller.");
}

<body>
    <div id="wrap">
        <div id="main">
            <div class="navbar navbar-inverse navbar-fixed-top">
                <div class="container">
                    <div class="navbar-header">
                        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                        <div id="logo">
                            <div class="link">
                                <a href="@Url.Action("Index", "Home")" class="navbar-brand">
                                    <span style="z-index:1000001;position:relative;">Radial</span>
                                    <div class="circles">
                                        <div class="circle2 navbar-brand"></div>
                                        <div class="circle1 navbar-brand"></div>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="navbar-collapse collapse">
                        <ul class="nav navbar-nav">
                            @if (Request.IsAuthenticated)
                            {
                                if (((int?)ViewBag.Organizations ?? 0) > 0)
                                {
                                    <li>@Html.ActionLink(RadialReview.Properties.DisplayNameStrings.reviews, "Index", "Review")</li>
                                    <li>@Html.ActionLink("Responsibilities", "Details", "User", new { id = ViewBag.UserId }, null)</li>
                                }
                                if (ViewBag.IsManager ?? false)
                                {
                                    <li>@Html.ActionLink(RadialReview.Properties.DisplayNameStrings.manage, "Index", "Manage")</li>
                                }
                            }
                            else
                            {
                                <li>@Html.ActionLink(RadialReview.Properties.DisplayNameStrings.about, "Index", "Home")</li>
                            }
                        </ul>
                        @Html.Partial("_LoginPartial", (string)ViewBag.ReturnUrl)
                    </div>
                </div>
            </div>
            @RenderSection("top", false)
            <div class="container body-content">
                @RenderSection("header", false)
                <div id="alerts">
                </div>
                <div class="@((bool?)ViewBag.Hints ?? true ? "" : "hidden")">
                    @RenderSection("hints", false)
                </div>
                @RenderBody()
                @*<hr/>*@
            </div>
            <div id="spinnerContainer"></div>
        </div>
        @Html.Partial("Partial/_Modal")
        @using (var s = Html.BeginScripts())
        {
            <script>
                $(window).bind('beforeunload', function (event) {
                    if ($(".unsaved").length > 0)
                        return "@RadialReview.Properties.DisplayNameStrings.unsavedItems";
                    return;
                });

                $(".modifiable").change(modify);
                $(".modifiable").bind('input', modify);

                function modify() {
                    $(this).addClass("unsaved");
                    $(".saveButton").addClass("unsaved");
                }

                function clearUnsaved() {
                    $(".unsaved").removeClass("unsaved");
                }

                $(function () {
                    ForceUnhide();
                    @if(ViewBag.Alert!=null)
                    {
                        @:showAlert("@ViewBag.Alert");                                  
                    }
                    @if(ViewBag.Success!=null)
                    {
                        @:showAlert("@ViewBag.Success", "alert-success", "Success!");
                    }

                    var data = localStorage.getItem("Alert");
                    localStorage.setItem("Alert", null);

                    var alert = JSON.parse(data);
                    if (alert !== undefined && alert != null && alert != "null")
                    {
                        var type = alert.type;
                        var title = alert.title;
                        var message =alert.message;

                        if (type === undefined)
                            type = "alert-success";
                        if (title === undefined)
                            title = "Success!";
                        if (message === undefined)
                            message = "";

                        showAlert(message, type, title);
                    }

                });

                function ForceUnhide() {
                    var speed = 40;
                    $(".startHiddenGroup").each(function (i, e) {
                        $(e).find(".startHidden").each(function (i, e2) {
                            setTimeout(function () {
                                $(e2).addClass("unhide");
                            }, speed * i);
                        });
                    });
                    /*$(".startHidden").each(function (i, e) {
                        setTimeout(function () {
                            $(e).addClass("unhide");
                        }, speed * i);
                    });*/
                }

                function ForceHide() {
                    $(".startHidden")
                        .removeClass("startHidden")
                        .removeClass("unhide")
                        .addClass("startHidden");
                }


                function showModal(title, pullUrl, pushUrl, callback, validation, onSuccess) {
                    $("#modalMessage").html("");
                    $("#modalMessage").addClass("hidden");
                    $.ajax({
                        url: pullUrl,
                        type: "GET",
                        //Couldnt retrieve modal partial view
                        error: function (jqxhr, status, error) {
                            $("#modalForm").unbind('submit');
                            if (status == "timeout")
                                showAlert("@RadialReview.Properties.ExceptionStrings.TimeoutException");
                            else
                                showAlert("@RadialReview.Properties.ExceptionStrings.SomethingWentWrong");
                        },
                        //Retrieved Partial Modal
                        success: function (modal) {
                            if (!modal) {
                                showAlert("@RadialReview.Properties.ExceptionStrings.SomethingWentWrong");
                                return;
                            }
                            $('#modalBody').html(modal);
                            $("#modalTitle").html(title);
                            //Reregister submit button
                            $("#modalForm").unbind('submit');

                            $("#modalForm").submit(function (e) {
                                e.preventDefault();
                                var serialized = $("#modalForm").serialize();

                                if (validation) {
                                    var message = eval(validation + '()');
                                    if (message !== undefined && message != true) {
                                        if (message == false) {
                                            $("#modalMessage").html("@RadialReview.Properties.DisplayNameStrings.error");
                                        }
                                        else {
                                            $("#modalMessage").html(message);
                                        }
                                        $("#modalMessage").removeClass("hidden");
                                        return;
                                    }
                                }
                                $.ajax({
                                    url: pushUrl,
                                    type: "POST",
                                    data: serialized,
                                    success: function (data, status, jqxhr) {
                                        if (!data) {
                                            $("#modal").modal("hide");
                                            showAlert("@RadialReview.Properties.ExceptionStrings.SomethingWentWrong");
                                        } else {
                                            var alert = new Object();
                                            alert.message = data.Message;
                                            localStorage.setItem("Alert", JSON.stringify(alert));

                                            if (onSuccess) {
                                                eval(onSuccess + "(data)");
                                                $("#modal").modal("hide");
                                            }
                                            else {
                                                if (data.Error) {
                                                    $("#modal").modal("hide");
                                                    console.log(data.Trace);
                                                    console.log(data.Message);
                                                    showAlert(data.Message);
                                                } else {
                                                    $("#modal").modal("hide");
                                                    location.reload();
                                                }
                                            }
                                        }
                                    },
                                    error: function (jqxhr, status, error) {
                                        if (error == "timeout") {
                                            showAlert("@RadialReview.Properties.ExceptionStrings.TimeoutException");
                                        } else {
                                            showAlert("@RadialReview.Properties.ExceptionStrings.SomethingWentWrong");
                                        }
                                        $("#modal").modal("hide");
                                    }
                                });
                            });
                            $('#modal').modal('show');
                            var count = 0;
                            setTimeout(function () {
                                if (callback) {
                                    eval(callback + '()');
                                } else {
                                    $('#modal input:not([type=hidden]):first').focus();
                                }
                            }, 550);
                        }


                    });
                }

                function showAlert(message, alertType, preface) {
                    if (alertType === undefined)
                        alertType = "alert-danger";
                    if (preface === undefined)
                        preface = "@RadialReview.Properties.MessageStrings.Warning";
                    var alert = $("<div class=\"alert " + alertType + " alert-dismissable start\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button><strong>" + preface + "</strong> <span class=\"message\">" + message + "</span></div>");
                    $("#alerts").prepend(alert);
                    setTimeout(function () { alert.removeClass("start"); }, 1);
                }

                function showJsonAlert(data, showSuccess) {
                    var message = data.Message;
                    if (message === undefined)
                        message = "";

                    if (!data) {
                        showAlert("@RadialReview.Properties.ExceptionStrings.SomethingWentWrong");
                    } else if (data.Error) {
                        console.log(data.Trace);
                        console.log(data.Message);
                        showAlert(message);
                    } else if (showSuccess) {
                        showAlert(message, "alert-success", "@RadialReview.Properties.MessageStrings.Success");
                    }
                }

                (function ($) {
                    $.fn.setCursorToTextEnd = function () {
                        var $initialVal = this.val();
                        this.val($initialVal);
                    };
                })(jQuery);
            </script>

        }

    </div>
    <div id="footer">
        <p>&copy; @DateTime.Now.Year - @RadialReview.Properties.ProductStrings.CompanyName</p>
        @Html.Partial("Partial/Footer")
    </div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    @RenderSection("modals", required: false)
    @Html.PageScripts()
</body>
</html>
