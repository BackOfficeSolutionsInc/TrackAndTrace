@model RadialReview.Models.FirePad.FPData
@{ 
    Layout = null;
}
<!doctype html>
<!-- See http://www.firepad.io/docs/ for detailed embedding docs. -->
<html>
<head>
    <meta charset="utf-8" />
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/3.3.0/firebase.js"></script>
    <!-- CodeMirror -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.css" />
    <!-- Firepad -->
    <link rel="stylesheet" href="https://cdn.firebase.com/libs/firepad/1.4.0/firepad.css" />
    <script src="https://cdn.firebase.com/libs/firepad/1.4.0/firepad.min.js"></script>
    <style>
        html {
            height: 100%;
        }

        body {
            margin: 0;
            height: 100%;
            position: relative;
        }
        /* Height / width / positioning can be customized for your use case.
         For demo purposes, we make firepad fill the entire browser. */
        #firepad-container {
            width: 100%;
            height: 100%;
        }
       	#firepad-container .firepad-btn{
		border-bottom-width: 1px;
	}
	#firepad-container .firepad-toolbar {
		height: 35px;
		line-height: 0px;
		background: #eee;
	}
	#firepad-container .firepad-btn a, span{
		font-size:12px;
	}

	.firepad-with-toolbar .CodeMirror {
		top: 27px;
		position: relative;
	}

    </style>
</head>
<body onload="init()">
    <input type="hidden" id="firepadRef"  value="@Model.firepadRef">
    <input type="hidden" id="text" value="@Model.text">
    <input type="hidden" id="padID" value="@Model.padID">
    <div>
        <div id="firepad-container"></div>
        <div><input type="file" value="Upload" id="fileButton" /></div>
    </div>
    <script>
    function init() {
        var _firepadRef = document.getElementById("firepadRef").value;
        var _text = document.getElementById("text").value;
        var _padID = document.getElementById("padID").value;
      var config = {
          apiKey: "AIzaSyCpfwGkfGnPJdfFvtuirwemLk0ZfNKKDb4",
          authDomain: "tractiontools-72dc6.firebaseapp.com",
          databaseURL: "https://tractiontools-72dc6.firebaseio.com",
          projectId: "tractiontools-72dc6",
          storageBucket: "tractiontools-72dc6.appspot.com",
          messagingSenderId: "194786005639"
      };
      firebase.initializeApp(config);

        //// Get Firebase Database reference.
      var firepadRef;
      if (_firepadRef == ' ') {
          firepadRef = getExampleRef();
      } else {
          firepadRef = firebase.database().ref(_firepadRef);
          
      }
	  
      //// Create CodeMirror (with lineWrapping on).
      var codeMirror = CodeMirror(document.getElementById('firepad-container'), { lineWrapping: true });
      codeMirror.setOption('onDragEvent', function (cm, e) {
          // Move the cursor as they drag.

          var pos = codeMirror.coordsChar({ left: e.x, top: e.y });
          codeMirror.setCursor(pos);
          codeMirror.focus();

          var isImageDrop = e.type == 'drop' && e.dataTransfer.files && e.dataTransfer.files.length > 0 && e.dataTransfer.files[0].type && e.dataTransfer.files[0].type.indexOf('image/') > -1;
          if (!isImageDrop) return;
          event.preventDefault();

          var reader = new FileReader();

          reader.onload = function (event) {
              var img = new Image();
              img.onload = function () {
                  firepad.insertEntity('img', {
                      'src': event.target.result,
                      'width': this.width,
                      'height': this.height
                  });
              };
              img.src = event.target.result;
          };

          reader.readAsDataURL(event.dataTransfer.files[0]);

          return true;
      });

      //// Create Firepad (with rich text toolbar and shortcuts enabled).
      var firepad = Firepad.fromCodeMirror(firepadRef, codeMirror,
          { richTextToolbar: true, richTextShortcuts: true });
        
      //// Initialize contents.
      firepad.on('ready', function () {
          
          if (firepad.isHistoryEmpty()) {
              if (_firepadRef == ' ') {
                  firepad.setHtml(_text + '<br/><br/><br/><br/>');
                 updateFirepad(firepadRef, _text, _padID);
              }
        }
      });

      // An example of a complex custom entity.
      firepad.registerEntity('checkbox', {
        render: function (info, entityHandler) {
          var inputElement = document.createElement('input');
          inputElement.setAttribute('type', 'checkbox');
          if(info.checked) {
            inputElement.checked = 'checked';
          }
          inputElement.addEventListener('click', function () {
            entityHandler.replace({checked:this.checked});
          });
          return inputElement;
        }.bind(this),
        fromElement: function (element) {
          var info = {};
          if(element.hasAttribute('checked')) {
            info.checked = true;
          }
          return info;
        },
        update: function (info, element) {
          if (info.checked) {
            element.checked = 'checked';
          } else {
            element.checked = null;
          }
        },
        export: function (info) {
          var inputElement = document.createElement('checkbox');
          if(info.checked) {
            inputElement.setAttribute('checked', true);
          }
          return inputElement;
        }
      });

      
    }

    // Helper to get hash from end of URL or generate a random one.
    function getExampleRef() {
      var ref = firebase.database().ref();
      var hash = window.location.hash.replace(/#/g, '');

      if (hash) {
        ref = ref.child(hash);
      } else {
        ref = ref.push(); // generate unique location.
        window.location = window.location + '#' + ref.key; // add it as a hash to the URL.
      }
      if (typeof console !== 'undefined') {
        console.log('Firebase data: ', ref.toString());
      }
      return ref;
    }
    function updateFirepad(firepadRef, text, padID) {

        firebase.database().ref('FirePad/' + padID).child('firepadRef').set(firepadRef.key);
    }
    
    </script>
</body>
</html>
