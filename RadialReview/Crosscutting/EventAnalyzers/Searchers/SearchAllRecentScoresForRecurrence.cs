using RadialReview.Accessors;
using RadialReview.Crosscutting.EventAnalyzers.Interfaces;
using RadialReview.Models.Scorecard;
using RadialReview.Models.Todo;
using RadialReview.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace RadialReview.Crosscutting.EventAnalyzers.Searchers {
	public class SearchAllRecentScoresForRecurrence : BaseSearch<List<ScoreModel>> {
		public SearchAllRecentScoresForRecurrence(long recurrenceId) {
			RecurrenceId = recurrenceId;
		}

		public long RecurrenceId { get; private set; }

		public override async Task<List<ScoreModel>> PerformSearch(IEventSettings settings) {
			return await L10Accessor.GetOrGenerateScoresForRecurrence(settings.Session, settings.Admin, RecurrenceId, includeAutoGenerated:false, now: settings.RunTime);
		}

		protected override IEnumerable<string> UniqueKeys(IEventSettings settings) {
			return new[] {
				"r_"+RecurrenceId,
			};
		}
	}
}