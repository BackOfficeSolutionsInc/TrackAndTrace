using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RadialReview.Utilities.Integrations;
using RadialReview.Utilities;
using System.Threading.Tasks;
using System.Collections.Generic;
using RadialReview.Hooks;
using TractionTools.Tests.TestUtils;
using static TractionTools.Tests.Permissions.BasePermissionsTest;
using TractionTools.Tests.Utilities;
using RadialReview.Utilities.Hooks;
using NHibernate;
using RadialReview.Models.Events;
using static RadialReview.Utilities.Integrations.ActiveCampaignConnector;
using RadialReview.Accessors;
using RadialReview;
using RadialReview.Models.Payments;

namespace TractionTools.Tests.Integrations {
	[TestClass]
	public class ActiveCampaignTest : BaseTest {
		[TestMethod]
		public async Task CreateEvent() {
			var config = Config.GetActiveCampaignConfig();
			config.TestMode = false;
			var connector = new ActiveCampaignConnector(config);
			var result = await connector.EventAsync("Test", null, new Dictionary<string, string>() {
				{"email","clay.upton@mytractiontools.com" }
			});

			Assert.IsTrue(result.IsSuccessful);
		}


		[TestMethod]
		public async Task ConnectionTest() {
			var config = Config.GetActiveCampaignConfig();
			config.TestMode = false;
			var connector = new ActiveCampaignConnector(config);
			await connector.TestConnection();
		}

		private string GenUserEmail(string name) {
			return "clay.upton+" + name.Replace("@", "_") + "@mytractiontools.com";
		}

		[TestMethod]
		public async Task TestPrimaryContactEvents() {
			var aceh = new ActiveCampaignEventHooks();
			if (!aceh.Configs.TestMode)
				Assert.Inconclusive("ActiveCampaign is not in test mode. 'ActiveCampaign_ForceRun' must be false in app.config.");

			var org = await OrgUtil.CreateOrganization();


			var now = DateTime.UtcNow;

			HooksRegistry.RegisterHook(aceh);

			using (var s = HibernateSession.GetCurrentSession()) {
				using (var tx = s.BeginTransaction()) {
					await EventUtil.Trigger(x => x.Create(s, EventType.CreatePrimaryContact, org.Manager, org.Manager, "TestPrimary"));
					tx.Commit();
					s.Flush();
				}
			}

			var TestRequests = aceh.Connector.GetValue<ActiveCampaignConnector, List<ActiveCampaignRequest>>("TestRequests");
			Assert.AreEqual(1, TestRequests.Count());
			Assert.AreEqual("contact_sync", TestRequests.First().ApiAction);
			var dict = TestRequests.First().Parameters;
			Assert.AreEqual(21, dict.Keys.Count);
			var f = aceh.Configs.Fields;
			var lists = aceh.Configs.Lists;
			//Assert.AreEqual("{\"email\":\"clay.upton+" + org.Manager.GetUsername().Replace("@", "_") + "@mytractiontools.com\"}", dict["visit"]);

			Assert.AreEqual(GenUserEmail(org.Manager.GetUsername()), dict["email"]);
			Assert.AreEqual(org.Manager.GetFirstName(), dict["first_name"]);
			Assert.AreEqual(org.Manager.GetLastName(), dict["last_name"]);
			Assert.AreEqual(org.Organization.GetName(), dict["orgname"]);
			Assert.AreEqual("" + org.Id, dict["field[" + f.OrgId + ",0]"]);
			Assert.AreEqual("Yes", dict["field[" + f.Autogenerated + ",0]"]);
			Assert.AreEqual("" + org.Manager.Id, dict["field[" + f.UserId + ",0]"]);
			Assert.AreEqual("Traction Tools Support", dict["field[" + f.Title + ",0]"]);
			Assert.AreEqual("Yes", dict["field[" + f.IsTest + ",0]"]);
			Assert.AreEqual("Demo", dict["field[" + f.AccountType + ",0]"]);
			Assert.IsFalse(dict.ContainsKey("field[3,0]"));
			Assert.AreEqual(null, dict["field[" + f.CoachName + ",0]"]);
			Assert.AreEqual("Unknown", dict["field[" + f.CoachType + ",0]"]);
			Assert.AreEqual("Unknown", dict["field[" + f.HasEosImplementer + ",0]"]);
			Assert.AreEqual(null, dict["field[" + f.ReferralSource + ",0]"]);
			Assert.AreEqual("" + now.Year, dict["field[" + f.ReferralYear + ",0]"]);
			Assert.AreEqual("Q" + ApplicationAccessor.GetTTQuarter(now), dict["field[" + f.ReferralQuarter + ",0]"]);
			Assert.AreEqual("primary_contact", dict["tags"]);

			//Config Lists
			Assert.AreEqual("" + lists.PrimaryContact, dict["p[" + lists.PrimaryContact + "]"]);
			Assert.AreEqual("1", dict["status[" + lists.PrimaryContact + "]"]);
			Assert.AreEqual("" + lists.ContactList, dict["p[" + lists.ContactList + "]"]);
			Assert.AreEqual("1", dict["status[" + lists.ContactList + "]"]);
		}


		[TestMethod]
		public async Task TestEventToCaller() {
			var aceh = new ActiveCampaignEventHooks();
			if (!aceh.Configs.TestMode)
				Assert.Inconclusive("ActiveCampaign is not in test mode. 'ActiveCampaign_ForceRun' must be false in app.config.");

			var org = await OrgUtil.CreateOrganization();
			var l10 = await L10Utility.CreateRecurrence();
			var now = DateTime.UtcNow;
			HooksRegistry.RegisterHook(aceh);

			using (var s = HibernateSession.GetCurrentSession()) {
				using (var tx = s.BeginTransaction()) {
					await EventUtil.Trigger(x => x.Create(s, EventType.CreateLeadershipMeeting, org.Employee, l10.Recur, "TestEventToCaller"));
					tx.Commit();
					s.Flush();
				}
			}
			var TestRequests = aceh.Connector.GetValue<ActiveCampaignConnector, List<ActiveCampaignRequest>>("TestRequests");
			Assert.AreEqual(1, TestRequests.Count());
			Assert.AreEqual(null, TestRequests.First().ApiAction);
			var dict = TestRequests.First().Parameters;
			Assert.AreEqual(5, dict.Keys.Count);
			Assert.AreEqual("{\"email\":\"clay.upton+" + org.Employee.GetUsername().Replace("@", "_") + "@mytractiontools.com\"}", dict["visit"]);

			Assert.AreEqual(aceh.Configs.TrackKey, dict["key"]);
			Assert.AreEqual(aceh.Configs.ActId, dict["actid"]);
			Assert.AreEqual("" + EventType.CreateLeadershipMeeting, dict["event"]);
			Assert.IsNotNull(dict["eventdata"]);

		}

		[TestMethod]
		public async Task TestEventToBilling() {
			var aceh = new ActiveCampaignEventHooks();
			if (!aceh.Configs.TestMode)
				Assert.Inconclusive("ActiveCampaign is not in test mode. 'ActiveCampaign_ForceRun' must be false in app.config.");

			var org = await OrgUtil.CreateOrganization();
			var l10 = await L10Utility.CreateRecurrence();
			var now = DateTime.UtcNow;

			var billingEmail = "billing@email.com";

			HooksRegistry.RegisterHook(aceh);
			using (var s = HibernateSession.GetCurrentSession()) {
				using (var tx = s.BeginTransaction()) {
					s.Save(new PaymentSpringsToken() {
						OrganizationId = org.Id,
						Active = true,
						ReceiptEmail = billingEmail
					});
					tx.Commit();
					s.Flush();
				}
			}
			using (var s = HibernateSession.GetCurrentSession()) {
				using (var tx = s.BeginTransaction()) {
					await EventUtil.Trigger(x => x.Create(s, EventType.PaymentFailed, org.Employee, l10.Recur, "TestEventToBilling"));
					tx.Commit();
					s.Flush();
				}
			}
			var TestRequests = aceh.Connector.GetValue<ActiveCampaignConnector, List<ActiveCampaignRequest>>("TestRequests");
			Assert.AreEqual(1, TestRequests.Count());
			Assert.AreEqual(null, TestRequests.First().ApiAction);
			var dict = TestRequests.First().Parameters;
			Assert.AreEqual(5, dict.Keys.Count);
			Assert.AreEqual("{\"email\":\"clay.upton+"+ billingEmail.Replace("@","_") + "@mytractiontools.com\"}", dict["visit"]);
			Assert.AreEqual(aceh.Configs.TrackKey, dict["key"]);
			Assert.AreEqual(aceh.Configs.ActId, dict["actid"]);
			Assert.AreEqual("" + EventType.PaymentFailed, dict["event"]);
			Assert.IsNotNull(dict["eventdata"]);
		}		
	}
}
