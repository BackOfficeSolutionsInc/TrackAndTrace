files:
  "/var/radial/install/cronjob" :
    mode: "000777"
    owner: root
    group: root
    content: |
      # Run check every 10 seconds..
      * * * * * ( /var/radial/install/runner.sh >> /var/radial/start.log )
      * * * * * ( sleep 10 ; /var/radial/install/runner.sh >> /var/radial/start.log )
      * * * * * ( sleep 20 ; /var/radial/install/runner.sh >> /var/radial/start.log )
      * * * * * ( sleep 30 ; /var/radial/install/runner.sh >> /var/radial/start.log )
      * * * * * ( sleep 40 ; /var/radial/install/runner.sh >> /var/radial/start.log )
      * * * * * ( sleep 50 ; /var/radial/install/runner.sh >> /var/radial/start.log )
  "/var/radial/install/runner.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      if [[ ! $(pgrep -f tt-server.sh) || ! $(pgrep -f node)  ]]; then
        echo "Runner.sh - Restarting tt-server.sh:     $(date)"
        /var/radial/install/tt-server.sh &
      else
        echo "Runner.sh - Already running tt-server.sh:                `date`"
      fi
  "/var/radial/install/tt-server.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      cd /var/app/current/etherpad-lite/      
      sudo killall node
      sudo killall nginx
      sudo node node_modules/ep_etherpad-lite/node/server.js
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_restart_delayed_job.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      sudo mkdir -p /var/radial/
      sudo chmod a+w /var/radial/start.log
      sudo touch /var/radial/exe.log
      sudo chmod a+w /var/radial/exe.log
      echo "" >> /var/radial/start.log
      echo "==============================================" >> /var/radial/start.log
      echo "=========`date`=========" >> /var/radial/start.log
      echo "==Running as: `whoami`" >> /var/radial/start.log      
      echo "Post deploy starting...">> /var/radial/start.log
      echo "Deleteing crontabs...">> /var/radial/start.log
      crontab -r
      /var/radial/current/install/installer-script.sh
      echo "Post deploy completed.">> /var/radial/start.log
      echo "Adding crontabs...">> /var/radial/start.log
      crontab /var/radial/install/cronjob
      #cp -r /var/radial/current/etherpad-lite/* /var/radial/current/
      #cp /var/app/current/radial-settings.json /var/app/current/etherpad-lite/settings.json
      #cd /var/app/current/etherpad-lite
      #node node_modules/ep_etherpad-lite/node/server.js &
      #disown
      #cd /var/app/current/etherpad-lite
      #node node_modules/ep_etherpad-lite/node/server.js &
      #disown
      #nohup /var/app/current/bin/safeRun.sh /var/radial-installer/exe.log --root &
      #echo "Server started.">> /var/radial/start.log
      #sleep 10
      echo "==============================================" >> /var/radial/start.log
      exit
  "/var/radial/current/install/installer-script.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      sudo mkdir -p /var/radial/current/install/
      /var/radial/current/install/download.sh
      /var/radial/current/install/dependencies.sh
      cp /var/radial/current/radial-settings.json /var/radial/current/etherpad-lite/settings.json
      cp -a /var/radial/current/. /var/app/current/
  "/var/radial/current/install/dependencies.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      echo "Running install commands..." >> /var/radial/start.log
      echo "Installing all plugins..." >> /var/radial/start.log
      /var/radial/current/install/fileUploadAWS.sh >> /var/radial/start.log
      /var/radial/current/install/additionalPlugins.sh >> /var/radial/start.log
      echo "plugins installed." >> /var/radial/start.log
      echo "Installing dependencies..." >> /var/radial/start.log
      sudo /var/radial/current/etherpad-lite/bin/installDeps.sh >> /var/radial/start.log
      echo "dependencies installed." >> /var/radial/start.log
      echo "Install commands completed." >> /var/radial/start.log
      ls /var/radial/current/ >> /var/radial/start.log
  "/var/radial/current/install/download.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      echo "Installing dependencies..." >> /var/radial/start.log
      sudo yum -y install gzip git curl python openssl-devel && sudo yum -y groupinstall "Development Tools"
      echo "done installing dependencies." >> /var/radial/start.log
      echo "Finding project..." >> /var/radial/start.log
      cd /var/radial/current/
      sudo rm -rf etherpad-lite
      if cd etherpad-lite; then 
        echo "---Project found. Nothing to clone."; 
      else 
        echo "---Project not found. Cloning."; 
        sudo git clone git://github.com/ether/etherpad-lite.git etherpad-lite;
        cd etherpad-lite; 
      fi >> /var/radial/start.log
      npm install nohup >> /var/radial/nohup-install.log
      curl --silent --location https://rpm.nodesource.com/setup_4.x | sudo bash -   >> /var/radial/node-install.log
      sudo yum -y install nodejs  >> /var/radial/node-install.log
  "/var/radial/current/install/fileUploadAWS.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      cd /var/radial/current/etherpad-lite/
      echo "Installing ep_fileupload_aws..." >> /var/radial/start.log
      sudo npm install custom/ep_fileupload_aws/
      echo "Installed ep_fileupload_aws." >> /var/radial/start.log
  "/var/radial/current/install/additionalPlugins.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      echo "Installing additional plugins." >> /var/radial/start.log
      cd /var/radial/current/etherpad-lite/
      sudo npm install ep_embedded_hyperlinks
      sudo npm install ep_previewimages
      sudo npm install ep_spellcheck
      sudo npm install ep_themes_ext
      echo "Additional plugins installed." >> /var/radial/start.log
  "/var/radial/current/radial-settings.json" :
    mode: "000644"
    owner: root
    group: root
    content: |
      /*
        This file must be valid JSON. But comments are allowed
        Please edit settings.json, not settings.json.template
        To still commit settings without credentials you can 
        store any credential settings in credentials.json
      */
      {      
        "ep_fileupload_aws" : {
             "S3_ACCESS_KEY": "AKIAJZPB4TBVA7SLDE3A",
             "S3_SECRET_KEY":"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",
             "bucket" : "tractiontools",
             "base_key" : "n/upload/",
        },
        "ep_spellcheck" : { "disabledByDefault" : false},      
        "ep_themes_ext": {
          "default": ["https://s3.amazonaws.com/Radial/etherpad/web.css"],
          "theme1": ["https://s3.amazonaws.com/Radial/etherpad/web.css"]
        },
        // Name your instance!
        "title": "Traction Tools Notes",
        // favicon default name
        // alternatively, set up a fully specified Url to your own favicon
        "favicon": "favicon.ico",
        //IP and port which etherpad should bind at
        "ip": "0.0.0.0",
        "port" : 8081,
        /*
        // Node native SSL support
        // this is disabled by default
        //
        // make sure to have the minimum and correct file access permissions set
        // so that the Etherpad server can access them
        */
        /*"ssl" : {
                  "key"  : "ssl/notes_traction_tools.key",
                  "cert" : "ssl/bundle.crt",
                  "ciphers": "ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:AES128-GCM-SHA256:!RC4:HIGH:!MD5:!aNULL"
        },*/
        //The Type of the database. You can choose between dirty, postgres, sqlite and mysql
        //You shouldn't use "dirty" for for anything else than testing or development
        /*"dbType" : "dirty",
        //the database specific settings
        "dbSettings" : {
          "filename" : "var/dirty.db"
        },
       
         An Example of MySQL Configuration*/
         "dbType" : "mysql",
         "dbSettings" : {
           "user"    : "root",
           "host"    : "radial-notes-db.chypqcammsbu.us-east-1.rds.amazonaws.com",
           "password": "ot&aN&s8jqvIjH",
           "database": "notes"
         },
        //the default text of a pad
        "defaultPadText" : "",
      
        /* Default Pad behavior, users can override by changing */
        "padOptions": {
          "noColors": true,
          "showControls": true,
          "showChat": false,
          "showLineNumbers": true,
          "useMonospaceFont": false,
          "userName": true,
          "userColor": false,
          "rtl": false,
          "alwaysShowChat": false,
          "chatAndUsers": false,
          "lang": "en-us"
        },
      
        /* Should we suppress errors from being visible in the default Pad Text? */
        "suppressErrorsInPadText" : false,
      
        /* Users must have a session to access pads. This effectively allows only group pads to be accessed. */
        "requireSession" : false,
      
        /* Users may edit pads but not create new ones. Pad creation is only via the API. This applies both to group pads and regular pads. */
        "editOnly" : false,
      
        /* Users, who have a valid session, automatically get granted access to password protected pads */
        "sessionNoPassword" : false,
      
        /* if true, all css & js will be minified before sending to the client. This will improve the loading performance massivly,
           but makes it impossible to debug the javascript/css */
        "minify" : true,
      
        /* How long may clients use served javascript code (in seconds)? Without versioning this
           may cause problems during deployment. Set to 0 to disable caching */
        "maxAge" : 900, // 60 * 60 * 6 = 6 hours
      
        /* This is the absolute path to the Abiword executable. Setting it to null, disables abiword.
           Abiword is needed to advanced import/export features of pads*/
        "abiword" : null,
      
        /* This is the absolute path to the soffice executable. Setting it to null, disables LibreOffice exporting.
           LibreOffice can be used in lieu of Abiword to export pads */
        "soffice" : null,
      
        /* This is the path to the Tidy executable. Setting it to null, disables Tidy.
           Tidy is used to improve the quality of exported pads*/
        "tidyHtml" : null,
      
        /* Allow import of file types other than the supported types: txt, doc, docx, rtf, odt, html & htm */
        "allowUnknownFileEnds" : true,
      
        /* This setting is used if you require authentication of all users.
           Note: /admin always requires authentication. */
        "requireAuthentication" : false,
      
        /* Require authorization by a module, or a user with is_admin set, see below. */
        "requireAuthorization" : false,
      
        /*when you use NginX or another proxy/ load-balancer set this to true*/
        "trustProxy" : false,
      
        /* Privacy: disable IP logging */
        "disableIPlogging" : false,
      
        /* Users for basic authentication. is_admin = true gives access to /admin.
           If you do not uncomment this, /admin will not be available! */
       
        "users": {
          "admin": {
            "password": "@mwUW#SLsIWiCd",
            "is_admin": true
          }
        },/*,
          "user": {
            "password": "changeme1",
            "is_admin": false
          }
        },
        */
      
        // restrict socket.io transport methods
        /*"socketTransportProtocols" : ["websocket", "xhr-polling", "jsonp-polling", "htmlfile"],
        "socketTransportProtocols" : ["xhr-polling", "jsonp-polling", "htmlfile"],*/
        "socketTransportProtocols" : ["xhr-polling", "jsonp-polling", "htmlfile"],
      
      
        // Allow Load Testing tools to hit the Etherpad Instance.  Warning this will disable security on the instance.
        "loadTest": false,
      
        // Disable indentation on new line when previous line ends with some special chars (':', '[', '(', '{')
        /*
        "indentationOnNewLine": false,
        */
      
      /* The toolbar buttons configuration.*/
        "toolbar": {
          "left": [
            ["bold", "italic", "underline", "strikethrough"],
            ["orderedlist", "unorderedlist", "indent", "outdent"],
            ["undo", "redo"]
            //["clearauthorship"]
          ],
          "right": [
            //["importexport", "timeslider", "savedrevision"],
            ["timeslider"]//,
           // ["settings"], "embed"],
      //      ["showusers"]
          ],
          "timeslider": [
            [/*"timeslider_export", */"timeslider_returnToPad"]
          ]
        },
      /*  */
      
        /* The log level we are using, can be: DEBUG, INFO, WARN, ERROR */
        "loglevel": "WARN",
      
        //Logging configuration. See log4js documentation for further information
        // https://github.com/nomiddlename/log4js-node
        // You can add as many appenders as you want here:
        "logconfig" :
          { "appenders": [
              { "type": "console"
              //, "category": "access"// only logs pad access
              }
          /*
            , { "type": "file"
            , "filename": "your-log-file-here.log"
            , "maxLogSize": 1024
            , "backups": 3 // how many log files there're gonna be at max
            //, "category": "test" // only log a specific category
              }*/
          /*
            , { "type": "logLevelFilter"
              , "level": "warn" // filters out all log messages that have a lower level than "error"
              , "appender":
                {  Use whatever appender you want here  }
              }*/
          /*
            , { "type": "logLevelFilter"
              , "level": "error" // filters out all log messages that have a lower level than "error"
              , "appender":
                { "type": "smtp"
                , "subject": "An error occured in your EPL instance!"
                , "recipients": "bar@blurdybloop.com, baz@blurdybloop.com"
                , "sendInterval": 60*5 // in secs -- will buffer log messages; set to 0 to send a mail for every message
                , "transport": "SMTP", "SMTP": { // see https://github.com/andris9/Nodemailer#possible-transport-methods
                    "host": "smtp.example.com", "port": 465,
                    "secureConnection": true,
                    "auth": {
                        "user": "foo@example.com",
                        "pass": "bar_foo"
                    }
                  }
                }
              }*/
            ]
          }
      }